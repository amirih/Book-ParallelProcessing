	.file	"IMP1.c"
	.text
	.p2align 4
	.globl	assignToThisCore12
	.type	assignToThisCore12, @function
assignToThisCore12:
.LFB5532:
	.cfi_startproc
	xorl	%edx, %edx
	xorl	%eax, %eax
.L2:
	movl	%eax, %ecx
	addl	$32, %eax
	movq	%rdx, mask(%rcx)
	movq	%rdx, mask+8(%rcx)
	movq	%rdx, mask+16(%rcx)
	movq	%rdx, mask+24(%rcx)
	cmpl	$128, %eax
	jb	.L2
	movslq	%edi, %rax
	cmpq	$1023, %rax
	jbe	.L8
.L4:
	movslq	%esi, %rax
	cmpq	$1023, %rax
	ja	.L5
	shrq	$6, %rax
	movl	$1, %edx
	shlx	%rsi, %rdx, %rsi
	orq	%rsi, mask(,%rax,8)
.L5:
	movl	$mask, %edx
	movl	$128, %esi
	xorl	%edi, %edi
	jmp	sched_setaffinity
	.p2align 4,,10
	.p2align 3
.L8:
	shrq	$6, %rax
	movl	$1, %edx
	shlx	%rdi, %rdx, %rdi
	orq	%rdi, mask(,%rax,8)
	jmp	.L4
	.cfi_endproc
.LFE5532:
	.size	assignToThisCore12, .-assignToThisCore12
	.p2align 4
	.globl	assignImagef32
	.type	assignImagef32, @function
assignImagef32:
.LFB5535:
	.cfi_startproc
	vmovsd	.LC0(%rip), %xmm5
	vmovsd	.LC1(%rip), %xmm4
	vmovsd	.LC2(%rip), %xmm6
	vxorps	%xmm2, %xmm2, %xmm2
	movq	%rdi, %r9
	xorl	%esi, %esi
.L10:
	vcvtsi2sdl	%esi, %xmm2, %xmm3
	movq	%r9, %r8
	movl	%esi, %edi
	xorl	%ecx, %ecx
	vmulsd	%xmm6, %xmm3, %xmm3
	.p2align 4,,10
	.p2align 3
.L11:
	movl	%ecx, %eax
	vcvtsi2sdl	%eax, %xmm2, %xmm0
	movl	%esi, %eax
	incl	%ecx
	cltd
	idivl	%ecx
	vmovapd	%xmm0, %xmm1
	addq	$4, %r8
	addl	%edi, %eax
	movl	%eax, %edx
	shrl	%edx
	imulq	$1195121335, %rdx, %rdx
	addl	%esi, %edi
	shrq	$37, %rdx
	imull	$230, %edx, %edx
	subl	%edx, %eax
	vcvtsi2sdl	%eax, %xmm2, %xmm0
	vfmadd231sd	%xmm5, %xmm1, %xmm0
	vaddsd	%xmm3, %xmm0, %xmm0
	vaddsd	%xmm4, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -4(%r8)
	cmpl	$1024, %ecx
	jne	.L11
	incl	%esi
	addq	$4112, %r9
	cmpl	$1024, %esi
	jne	.L10
	ret
	.cfi_endproc
.LFE5535:
	.size	assignImagef32, .-assignImagef32
	.p2align 4
	.globl	assignMatrixf32
	.type	assignMatrixf32, @function
assignMatrixf32:
.LFB5536:
	.cfi_startproc
	vmovsd	.LC1(%rip), %xmm1
	vxorps	%xmm2, %xmm2, %xmm2
	movq	%rdi, %r8
	xorl	%esi, %esi
.L16:
	xorl	%edi, %edi
	movl	$1, %ecx
	.p2align 4,,10
	.p2align 3
.L17:
	movl	%esi, %eax
	cltd
	idivl	%ecx
	leal	(%rax,%rdi), %edx
	movq	%rdx, %rax
	imulq	$274877907, %rdx, %rdx
	addl	%esi, %edi
	shrq	$38, %rdx
	imull	$1000, %edx, %edx
	subl	%edx, %eax
	vcvtsi2sdl	%eax, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -4(%r8,%rcx,4)
	incq	%rcx
	cmpq	$1025, %rcx
	jne	.L17
	incl	%esi
	addq	$4096, %r8
	cmpl	$1024, %esi
	jne	.L16
	ret
	.cfi_endproc
.LFE5536:
	.size	assignMatrixf32, .-assignMatrixf32
	.p2align 4
	.globl	assignImagei32
	.type	assignImagei32, @function
assignImagei32:
.LFB5537:
	.cfi_startproc
	movq	%rdi, %r9
	movl	$2155905153, %r10d
	xorl	%edi, %edi
.L22:
	xorl	%r8d, %r8d
	movl	$1, %ecx
	.p2align 4,,10
	.p2align 3
.L23:
	movl	%edi, %eax
	cltd
	idivl	%ecx
	leal	(%rax,%r8), %edx
	movq	%rdx, %rax
	imulq	%r10, %rdx
	addl	%edi, %r8d
	shrq	$39, %rdx
	movl	%edx, %esi
	sall	$8, %esi
	subl	%edx, %esi
	subl	%esi, %eax
	movl	%eax, -4(%r9,%rcx,4)
	incq	%rcx
	cmpq	$1025, %rcx
	jne	.L23
	incl	%edi
	addq	$4112, %r9
	cmpl	$1024, %edi
	jne	.L22
	ret
	.cfi_endproc
.LFE5537:
	.size	assignImagei32, .-assignImagei32
	.p2align 4
	.globl	assignMatrixi32
	.type	assignMatrixi32, @function
assignMatrixi32:
.LFB5538:
	.cfi_startproc
	leaq	4096(%rdi), %rsi
	vmovdqa	.LC4(%rip), %ymm8
	vmovdqa	.LC5(%rip), %ymm4
	vmovdqa	.LC6(%rip), %ymm7
	vmovdqa	.LC7(%rip), %ymm6
	vmovdqa	.LC3(%rip), %ymm9
	movq	%rdi, %rax
	movq	%rsi, %rdx
	xorl	%ecx, %ecx
.L28:
	vmovd	%ecx, %xmm5
	vpbroadcastd	%xmm5, %ymm5
	vmovdqa	%ymm9, %ymm3
	.p2align 4,,10
	.p2align 3
.L29:
	vmovdqa	%ymm3, %ymm2
	vpmulld	%ymm5, %ymm2, %ymm2
	addq	$32, %rax
	vpaddd	%ymm8, %ymm3, %ymm3
	vpsrlq	$32, %ymm2, %ymm1
	vpmuldq	%ymm4, %ymm2, %ymm0
	vpmuldq	%ymm4, %ymm1, %ymm1
	vpshufb	%ymm7, %ymm0, %ymm0
	vpshufb	%ymm6, %ymm1, %ymm1
	vpor	%ymm1, %ymm0, %ymm0
	vpsrad	$6, %ymm0, %ymm1
	vpslld	$5, %ymm1, %ymm0
	vpsubd	%ymm1, %ymm0, %ymm0
	vpslld	$2, %ymm0, %ymm0
	vpaddd	%ymm1, %ymm0, %ymm0
	vpslld	$3, %ymm0, %ymm0
	vpsubd	%ymm0, %ymm2, %ymm0
	vmovdqu	%ymm0, -32(%rax)
	cmpq	%rdx, %rax
	jne	.L29
	incl	%ecx
	movq	%rsi, %rax
	addq	$4096, %rdx
	cmpl	$1024, %ecx
	je	.L32
	addq	$4096, %rsi
	jmp	.L28
.L32:
	vzeroupper
	ret
	.cfi_endproc
.LFE5538:
	.size	assignMatrixi32, .-assignMatrixi32
	.p2align 4
	.globl	assignMatrixi16
	.type	assignMatrixi16, @function
assignMatrixi16:
.LFB5539:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	xorl	%ebp, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	leaq	2048(%rdi), %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
.L34:
	leaq	-2048(%rbx), %r13
	xorl	%r12d, %r12d
	.p2align 4,,10
	.p2align 3
.L35:
	call	rand
	movl	%r12d, %edx
	shrl	%edx
	imulq	$558694933, %rdx, %rdx
	movl	%r12d, %ecx
	movl	%eax, %esi
	shrq	$36, %rdx
	imull	$246, %edx, %edx
	sarl	$31, %esi
	addq	$2, %r13
	subl	%edx, %ecx
	movslq	%eax, %rdx
	imulq	$1717986919, %rdx, %rdx
	addl	%ebp, %r12d
	sarq	$34, %rdx
	subl	%esi, %edx
	leal	(%rdx,%rdx,4), %edx
	addl	%edx, %edx
	subl	%edx, %eax
	addl	%ecx, %eax
	movw	%ax, -2(%r13)
	cmpq	%r13, %rbx
	jne	.L35
	incl	%ebp
	addq	$2048, %rbx
	cmpl	$1024, %ebp
	jne	.L34
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE5539:
	.size	assignMatrixi16, .-assignMatrixi16
	.p2align 4
	.globl	assignImagei16
	.type	assignImagei16, @function
assignImagei16:
.LFB5563:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	xorl	%ebp, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	leaq	2048(%rdi), %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
.L41:
	leaq	-2048(%rbx), %r13
	xorl	%r12d, %r12d
	.p2align 4,,10
	.p2align 3
.L42:
	call	rand
	movl	%r12d, %edx
	shrl	%edx
	imulq	$558694933, %rdx, %rdx
	movl	%r12d, %ecx
	movl	%eax, %esi
	shrq	$36, %rdx
	imull	$246, %edx, %edx
	sarl	$31, %esi
	addq	$2, %r13
	subl	%edx, %ecx
	movslq	%eax, %rdx
	imulq	$1717986919, %rdx, %rdx
	addl	%ebp, %r12d
	sarq	$34, %rdx
	subl	%esi, %edx
	leal	(%rdx,%rdx,4), %edx
	addl	%edx, %edx
	subl	%edx, %eax
	addl	%ecx, %eax
	movw	%ax, -2(%r13)
	cmpq	%r13, %rbx
	jne	.L42
	incl	%ebp
	addq	$2048, %rbx
	cmpl	$1024, %ebp
	jne	.L41
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE5563:
	.size	assignImagei16, .-assignImagei16
	.p2align 4
	.globl	imageTranspose
	.type	imageTranspose, @function
imageTranspose:
.LFB5541:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	leaq	4108(%rdi), %r8
	movl	$4, %r11d
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	movl	$4112, %r10d
	xorl	%r9d, %r9d
	pushq	%r14
	movl	$1, %esi
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
	.p2align 4,,10
	.p2align 3
.L48:
	movq	%r8, %rax
	leaq	-4104(%r10), %rdx
	subq	%rdi, %rax
	cmpq	%rax, %rdx
	jg	.L56
	cmpl	$6, %r9d
	jbe	.L56
	movl	%esi, %ecx
	shrl	$3, %ecx
	salq	$5, %rcx
	leaq	(%r11,%rdi), %rax
	addq	%r8, %rcx
	movq	%r8, %rdx
	.p2align 4,,10
	.p2align 3
.L49:
	vmovss	24648(%rax), %xmm2
	vmovss	8216(%rax), %xmm1
	vinsertps	$0x10, 28756(%rax), %xmm2, %xmm3
	vinsertps	$0x10, 12324(%rax), %xmm1, %xmm4
	vmovss	16432(%rax), %xmm2
	vmovss	(%rax), %xmm1
	vinsertps	$0x10, 20540(%rax), %xmm2, %xmm2
	vinsertps	$0x10, 4108(%rax), %xmm1, %xmm1
	vmovups	(%rdx), %ymm0
	vmovlhps	%xmm4, %xmm1, %xmm1
	vmovlhps	%xmm3, %xmm2, %xmm2
	vinsertf128	$0x1, %xmm2, %ymm1, %ymm1
	vmovups	%ymm1, (%rdx)
	vmovss	%xmm0, (%rax)
	vextractps	$1, %xmm0, 4108(%rax)
	vextractps	$2, %xmm0, 8216(%rax)
	vextractps	$3, %xmm0, 12324(%rax)
	addq	$32, %rdx
	vextractf128	$0x1, %ymm0, %xmm0
	vmovss	%xmm0, 16432(%rax)
	vextractps	$1, %xmm0, 20540(%rax)
	vextractps	$2, %xmm0, 24648(%rax)
	vextractps	$3, %xmm0, 28756(%rax)
	addq	$32864, %rax
	cmpq	%rcx, %rdx
	jne	.L49
	movl	%esi, %ecx
	andl	$-8, %ecx
	testb	$7, %sil
	je	.L52
	movl	%ecx, %edx
	leaq	(%r8,%rdx,4), %rax
	imulq	$4108, %rdx, %rdx
	movslq	%esi, %rbx
	salq	$2, %rbx
	leaq	(%rdx,%rbx), %r12
	addq	%rdi, %r12
	vmovss	(%rax), %xmm0
	vmovss	(%r12), %xmm1
	leal	1(%rcx), %r14d
	vmovss	%xmm1, (%rax)
	vmovss	%xmm0, (%r12)
	cmpl	%r9d, %ecx
	jge	.L52
	leaq	4108(%rdx,%rbx), %r12
	addq	%rdi, %r12
	vmovss	4(%rax), %xmm0
	vmovss	(%r12), %xmm1
	leal	2(%rcx), %r15d
	vmovss	%xmm1, 4(%rax)
	vmovss	%xmm0, (%r12)
	cmpl	%r9d, %r14d
	jge	.L52
	leaq	8216(%rdx,%rbx), %r12
	addq	%rdi, %r12
	vmovss	8(%rax), %xmm0
	vmovss	(%r12), %xmm1
	leal	3(%rcx), %r14d
	vmovss	%xmm1, 8(%rax)
	vmovss	%xmm0, (%r12)
	cmpl	%r9d, %r15d
	jge	.L52
	leaq	12324(%rdx,%rbx), %r12
	addq	%rdi, %r12
	vmovss	(%r12), %xmm1
	vmovss	12(%rax), %xmm0
	vmovss	%xmm1, 12(%rax)
	vmovss	%xmm0, (%r12)
	leal	4(%rcx), %r12d
	cmpl	%r9d, %r14d
	jge	.L52
	leaq	16432(%rdx,%rbx), %r14
	addq	%rdi, %r14
	vmovss	16(%rax), %xmm0
	vmovss	(%r14), %xmm1
	addl	$5, %ecx
	vmovss	%xmm1, 16(%rax)
	vmovss	%xmm0, (%r14)
	cmpl	%r9d, %r12d
	jge	.L52
	leaq	20540(%rdx,%rbx), %r12
	addq	%rdi, %r12
	vmovss	20(%rax), %xmm0
	vmovss	(%r12), %xmm1
	vmovss	%xmm1, 20(%rax)
	vmovss	%xmm0, (%r12)
	cmpl	%r9d, %ecx
	jge	.L52
	leaq	24648(%rdx,%rbx), %rdx
	addq	%rdi, %rdx
	vmovss	24(%rax), %xmm0
	vmovss	(%rdx), %xmm1
	vmovss	%xmm1, 24(%rax)
	vmovss	%xmm0, (%rdx)
.L52:
	incl	%esi
	incq	%r9
	addq	$4108, %r8
	addq	$4112, %r10
	addq	$4, %r11
	cmpl	$1024, %esi
	jne	.L48
	vzeroupper
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L56:
	.cfi_restore_state
	leaq	(%rdi,%r11), %rdx
	movq	%r8, %rax
	leaq	(%rdi,%r10), %rcx
	.p2align 4,,10
	.p2align 3
.L51:
	vmovss	(%rdx), %xmm1
	vmovss	(%rax), %xmm0
	vmovss	%xmm1, (%rax)
	addq	$4, %rax
	vmovss	%xmm0, (%rdx)
	addq	$4108, %rdx
	cmpq	%rcx, %rax
	jne	.L51
	jmp	.L52
	.cfi_endproc
.LFE5541:
	.size	imageTranspose, .-imageTranspose
	.p2align 4
	.globl	assignMatrixui16
	.type	assignMatrixui16, @function
assignMatrixui16:
.LFB5542:
	.cfi_startproc
	leaq	2048(%rdi), %rsi
	vmovdqa	.LC8(%rip), %ymm7
	vmovdqa	.LC4(%rip), %ymm6
	vmovdqa	.LC9(%rip), %ymm3
	vmovdqa	.LC10(%rip), %ymm9
	vmovdqa	.LC11(%rip), %ymm5
	vmovdqa	.LC3(%rip), %ymm8
	movq	%rdi, %rax
	movq	%rsi, %rdx
	xorl	%ecx, %ecx
.L65:
	vmovd	%ecx, %xmm4
	vpbroadcastw	%xmm4, %ymm4
	vmovdqa	%ymm8, %ymm2
	vpaddw	%ymm9, %ymm4, %ymm4
	.p2align 4,,10
	.p2align 3
.L66:
	vmovdqa	%ymm2, %ymm0
	vpaddd	%ymm6, %ymm0, %ymm1
	vpand	%ymm1, %ymm3, %ymm1
	vpand	%ymm0, %ymm3, %ymm0
	vpackusdw	%ymm1, %ymm0, %ymm0
	vpermq	$216, %ymm0, %ymm0
	vpaddw	%ymm0, %ymm4, %ymm0
	vpand	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm0, (%rax)
	addq	$32, %rax
	vpaddd	%ymm7, %ymm2, %ymm2
	cmpq	%rdx, %rax
	jne	.L66
	incl	%ecx
	movq	%rsi, %rax
	addq	$2048, %rdx
	cmpl	$1024, %ecx
	je	.L69
	addq	$2048, %rsi
	jmp	.L65
.L69:
	vzeroupper
	ret
	.cfi_endproc
.LFE5542:
	.size	assignMatrixui16, .-assignMatrixui16
	.p2align 4
	.globl	assignMatrixi8
	.type	assignMatrixi8, @function
assignMatrixi8:
.LFB5543:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	leaq	1024(%rdi), %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	xorl	%ebx, %ebx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
.L71:
	leaq	-1024(%rbp), %r12
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L72:
	call	rand
	movl	%eax, %ecx
	shrl	$31, %ecx
	addl	%ecx, %eax
	andl	$1, %eax
	movzbl	%r13b, %edx
	subl	%ecx, %eax
	addl	%edx, %eax
	cltd
	shrl	$24, %edx
	addl	%edx, %eax
	movzbl	%al, %eax
	subl	%edx, %eax
	movb	%al, (%r12)
	incq	%r12
	addl	%ebx, %r13d
	cmpq	%rbp, %r12
	jne	.L72
	incl	%ebx
	leaq	1024(%r12), %rbp
	cmpl	$1024, %ebx
	jne	.L71
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE5543:
	.size	assignMatrixi8, .-assignMatrixi8
	.p2align 4
	.globl	assignArrayi32
	.type	assignArrayi32, @function
assignArrayi32:
.LFB5544:
	.cfi_startproc
	vmovdqa	.LC12(%rip), %ymm4
	vmovdqa	.LC3(%rip), %ymm3
	vmovdqa	.LC4(%rip), %ymm6
	vmovdqa	.LC5(%rip), %ymm5
	vmovdqa	.LC6(%rip), %ymm8
	vmovdqa	.LC7(%rip), %ymm7
	leaq	4194304(%rdi), %rax
	.p2align 4,,10
	.p2align 3
.L78:
	vmovdqa	%ymm4, %ymm0
	vmovdqa	%ymm3, %ymm2
	vpmulld	%ymm0, %ymm2, %ymm2
	addq	$32, %rdi
	vpaddd	%ymm6, %ymm4, %ymm4
	vpaddd	%ymm6, %ymm3, %ymm3
	vpsrlq	$32, %ymm2, %ymm1
	vpmuldq	%ymm5, %ymm2, %ymm0
	vpmuldq	%ymm5, %ymm1, %ymm1
	vpshufb	%ymm8, %ymm0, %ymm0
	vpshufb	%ymm7, %ymm1, %ymm1
	vpor	%ymm1, %ymm0, %ymm0
	vpsrad	$6, %ymm0, %ymm1
	vpslld	$5, %ymm1, %ymm0
	vpsubd	%ymm1, %ymm0, %ymm0
	vpslld	$2, %ymm0, %ymm0
	vpaddd	%ymm1, %ymm0, %ymm0
	vpslld	$3, %ymm0, %ymm0
	vpsubd	%ymm0, %ymm2, %ymm0
	vmovdqu	%ymm0, -32(%rdi)
	cmpq	%rdi, %rax
	jne	.L78
	vzeroupper
	ret
	.cfi_endproc
.LFE5544:
	.size	assignArrayi32, .-assignArrayi32
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC13:
	.string	"w"
.LC14:
	.string	"fileForOutPuts"
.LC15:
	.string	"%s - %dx%d \n"
.LC16:
	.string	"\n\n"
.LC17:
	.string	" A[%d][%d] = %lf, \n"
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC18:
	.string	" \n*************************\n*********************FINISHED*********************\n***************** \n"
	.text
	.p2align 4
	.globl	savefloatMatrixFileForOutPuts
	.type	savefloatMatrixFileForOutPuts, @function
savefloatMatrixFileForOutPuts:
.LFB5557:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$.LC13, %esi
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movl	$.LC14, %edi
	xorl	%ebp, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	call	fopen
	movq	programName(%rip), %rdx
	movq	%rax, fileForOutPuts(%rip)
	movq	%rax, %rdi
	movl	$1024, %r8d
	movl	$1024, %ecx
	movl	$.LC15, %esi
	xorl	%eax, %eax
	call	fprintf
.L82:
	movq	fileForOutPuts(%rip), %rcx
	movl	$2, %edx
	movl	$1, %esi
	movl	$.LC16, %edi
	call	fwrite
	xorl	%ebx, %ebx
	.p2align 4,,10
	.p2align 3
.L81:
	vxorpd	%xmm1, %xmm1, %xmm1
	movq	fileForOutPuts(%rip), %rdi
	movl	%ebx, %ecx
	vcvtss2sd	(%r12,%rbx,4), %xmm1, %xmm0
	movl	%ebp, %edx
	movl	$.LC17, %esi
	movl	$1, %eax
	incq	%rbx
	call	fprintf
	cmpq	$1024, %rbx
	jne	.L81
	incl	%ebp
	addq	$4096, %r12
	cmpl	$1024, %ebp
	jne	.L82
	movq	fileForOutPuts(%rip), %rcx
	movl	$.LC18, %edi
	movl	$98, %edx
	movl	$1, %esi
	call	fwrite
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	movq	fileForOutPuts(%rip), %rdi
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	fclose
	.cfi_endproc
.LFE5557:
	.size	savefloatMatrixFileForOutPuts, .-savefloatMatrixFileForOutPuts
	.p2align 4
	.globl	savefloatMatrixFileName
	.type	savefloatMatrixFileName, @function
savefloatMatrixFileName:
.LFB5558:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	movq	%rsi, %rdi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movl	$.LC13, %esi
	xorl	%ebp, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	call	fopen
	movq	programName(%rip), %rdx
	movq	%rax, fileForOutPuts(%rip)
	movq	%rax, %rdi
	movl	$1024, %r8d
	movl	$1024, %ecx
	movl	$.LC15, %esi
	xorl	%eax, %eax
	call	fprintf
.L88:
	movq	fileForOutPuts(%rip), %rcx
	movl	$2, %edx
	movl	$1, %esi
	movl	$.LC16, %edi
	call	fwrite
	xorl	%ebx, %ebx
	.p2align 4,,10
	.p2align 3
.L87:
	vxorpd	%xmm1, %xmm1, %xmm1
	movq	fileForOutPuts(%rip), %rdi
	movl	%ebx, %ecx
	vcvtss2sd	(%r12,%rbx,4), %xmm1, %xmm0
	movl	%ebp, %edx
	movl	$.LC17, %esi
	movl	$1, %eax
	incq	%rbx
	call	fprintf
	cmpq	$1024, %rbx
	jne	.L87
	incl	%ebp
	addq	$4096, %r12
	cmpl	$1024, %ebp
	jne	.L88
	movq	fileForOutPuts(%rip), %rcx
	movl	$.LC18, %edi
	movl	$98, %edx
	movl	$1, %esi
	call	fwrite
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	movq	fileForOutPuts(%rip), %rdi
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	fclose
	.cfi_endproc
.LFE5558:
	.size	savefloatMatrixFileName, .-savefloatMatrixFileName
	.section	.rodata.str1.1
.LC19:
	.string	" A[%d][%d] = %d, \n"
	.text
	.p2align 4
	.globl	saveintMatrixFileForOutPuts
	.type	saveintMatrixFileForOutPuts, @function
saveintMatrixFileForOutPuts:
.LFB5559:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$.LC13, %esi
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movl	$.LC14, %edi
	xorl	%ebp, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	call	fopen
	movq	programName(%rip), %rdx
	movq	%rax, fileForOutPuts(%rip)
	movq	%rax, %rdi
	movl	$1024, %r8d
	movl	$1024, %ecx
	movl	$.LC15, %esi
	xorl	%eax, %eax
	call	fprintf
.L94:
	movq	fileForOutPuts(%rip), %rcx
	movl	$2, %edx
	movl	$1, %esi
	movl	$.LC16, %edi
	call	fwrite
	xorl	%ebx, %ebx
	.p2align 4,,10
	.p2align 3
.L93:
	movl	(%r12,%rbx,4), %r8d
	movq	fileForOutPuts(%rip), %rdi
	movl	%ebx, %ecx
	movl	%ebp, %edx
	movl	$.LC19, %esi
	xorl	%eax, %eax
	incq	%rbx
	call	fprintf
	cmpq	$1024, %rbx
	jne	.L93
	incl	%ebp
	addq	$4096, %r12
	cmpl	$1024, %ebp
	jne	.L94
	movq	fileForOutPuts(%rip), %rcx
	movl	$.LC18, %edi
	movl	$98, %edx
	movl	$1, %esi
	call	fwrite
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	movq	fileForOutPuts(%rip), %rdi
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	fclose
	.cfi_endproc
.LFE5559:
	.size	saveintMatrixFileForOutPuts, .-saveintMatrixFileForOutPuts
	.p2align 4
	.globl	saveintMatrixFileName
	.type	saveintMatrixFileName, @function
saveintMatrixFileName:
.LFB5560:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	movq	%rsi, %rdi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movl	$.LC13, %esi
	xorl	%ebp, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	call	fopen
	movq	programName(%rip), %rdx
	movq	%rax, fileForOutPuts(%rip)
	movq	%rax, %rdi
	movl	$1024, %r8d
	movl	$1024, %ecx
	movl	$.LC15, %esi
	xorl	%eax, %eax
	call	fprintf
.L100:
	movq	fileForOutPuts(%rip), %rcx
	movl	$2, %edx
	movl	$1, %esi
	movl	$.LC16, %edi
	call	fwrite
	xorl	%ebx, %ebx
	.p2align 4,,10
	.p2align 3
.L99:
	movl	(%r12,%rbx,4), %r8d
	movq	fileForOutPuts(%rip), %rdi
	movl	%ebx, %ecx
	movl	%ebp, %edx
	movl	$.LC19, %esi
	xorl	%eax, %eax
	incq	%rbx
	call	fprintf
	cmpq	$1024, %rbx
	jne	.L99
	incl	%ebp
	addq	$4096, %r12
	cmpl	$1024, %ebp
	jne	.L100
	movq	fileForOutPuts(%rip), %rcx
	movl	$.LC18, %edi
	movl	$98, %edx
	movl	$1, %esi
	call	fwrite
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	movq	fileForOutPuts(%rip), %rdi
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	fclose
	.cfi_endproc
.LFE5560:
	.size	saveintMatrixFileName, .-saveintMatrixFileName
	.section	.rodata.str1.1
.LC20:
	.string	"Add2Vectors"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB5561:
	.cfi_startproc
	movq	$.LC20, programName(%rip)
	vmovdqa	.LC3(%rip), %ymm1
	vmovdqa	.LC4(%rip), %ymm3
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L105:
	vmovdqa	%ymm1, %ymm0
	vpmulld	%ymm0, %ymm0, %ymm2
	vpslld	$1, %ymm0, %ymm0
	vmovdqu	%ymm0, b(%rax)
	addq	$32, %rax
	vpaddd	%ymm3, %ymm1, %ymm1
	vmovdqu	%ymm2, a-32(%rax)
	cmpq	$4096, %rax
	jne	.L105
#APP
# 16 "IMP1.c" 1
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm1
# 0 "" 2
#NO_APP
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L106:
	vmovdqu	b(%rax), %ymm4
	addq	$32, %rax
	vpaddd	a-32(%rax), %ymm4, %ymm0
	vmovdqu	%ymm0, c-32(%rax)
	cmpq	$4096, %rax
	jne	.L106
#APP
# 20 "IMP1.c" 1
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm2
# 0 "" 2
#NO_APP
	xorl	%eax, %eax
	vzeroupper
	ret
	.cfi_endproc
.LFE5561:
	.size	main, .-main
	.comm	c,4096,32
	.comm	b,4096,32
	.comm	a,4096,32
	.globl	fileForOutPuts
	.bss
	.align 8
	.type	fileForOutPuts, @object
	.size	fileForOutPuts, 8
fileForOutPuts:
	.zero	8
	.comm	temp2i16,32,32
	.comm	temp8,32,32
	.comm	mask,128,32
	.globl	ttime
	.align 8
	.type	ttime, @object
	.size	ttime, 8
ttime:
	.zero	8
	.globl	overal_time
	.align 8
	.type	overal_time, @object
	.size	overal_time, 8
overal_time:
	.zero	8
	.globl	elapsed_rdtsc
	.data
	.align 8
	.type	elapsed_rdtsc, @object
	.size	elapsed_rdtsc, 8
elapsed_rdtsc:
	.quad	99999999
	.comm	elapsed,8,8
	.globl	ttbest_rdtsc
	.align 8
	.type	ttbest_rdtsc, @object
	.size	ttbest_rdtsc, 8
ttbest_rdtsc:
	.quad	99999999999999999
	.comm	ttotal_rdtsc,8,8
	.comm	t2_rdtsc,8,8
	.comm	t1_rdtsc,8,8
	.comm	mask1,128,32
	.globl	programName
	.section	.rodata.str1.1
.LC21:
	.string	" "
	.data
	.align 8
	.type	programName, @object
	.size	programName, 8
programName:
	.quad	.LC21
	.globl	fileForSpeedups
	.bss
	.align 8
	.type	fileForSpeedups, @object
	.size	fileForSpeedups, 8
fileForSpeedups:
	.zero	8
	.comm	fileou_name,100,32
	.globl	filein_nikname
	.section	.rodata.str1.1
.LC22:
	.string	"06 - speckle-0.1/Nlena.pgm"
	.data
	.align 8
	.type	filein_nikname, @object
	.size	filein_nikname, 8
filein_nikname:
	.quad	.LC22
	.globl	filein_origin
	.section	.rodata.str1.8
	.align 8
.LC23:
	.string	"//home/matrin/Desktop/Come with me/I am organized here/004 - Cooperating/Maryam Moradifar/Implementations/ALL (Images)/sample/01 - origin/lena.pgm"
	.data
	.align 8
	.type	filein_origin, @object
	.size	filein_origin, 8
filein_origin:
	.quad	.LC23
	.globl	filein_name
	.section	.rodata.str1.8
	.align 8
.LC24:
	.string	"//home/matrin/Desktop/Come with me/I am organized here/004 - Cooperating/Maryam Moradifar/Implementations/ALL (Images)/sample/06 - speckle-0.1/Nlena.pgm"
	.data
	.align 8
	.type	filein_name, @object
	.size	filein_name, 8
filein_name:
	.quad	.LC24
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC0:
	.long	2296604913
	.long	1055193269
	.align 8
.LC1:
	.long	2439541424
	.long	1069513965
	.align 8
.LC2:
	.long	2296604913
	.long	1056241845
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC3:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC4:
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.long	8
	.align 32
.LC5:
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.long	274877907
	.align 32
.LC6:
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.align 32
.LC7:
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	-128
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.align 32
.LC8:
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.long	16
	.align 32
.LC9:
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.long	65535
	.align 32
.LC10:
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.value	10
	.align 32
.LC11:
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.value	255
	.align 32
.LC12:
	.long	1234
	.long	1235
	.long	1236
	.long	1237
	.long	1238
	.long	1239
	.long	1240
	.long	1241
	.ident	"GCC: (GNU) 9.2.1 20190827 (Red Hat 9.2.1-1)"
	.section	.note.GNU-stack,"",@progbits
