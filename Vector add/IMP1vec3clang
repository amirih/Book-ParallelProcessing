	.text
	.file	"IMP1.c"
	.globl	assignToThisCore12      # -- Begin function assignToThisCore12
	.p2align	4, 0x90
	.type	assignToThisCore12,@function
assignToThisCore12:                     # @assignToThisCore12
	.cfi_startproc
# %bb.0:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, mask+96(%rip)
	vmovups	%ymm0, mask+64(%rip)
	vmovups	%ymm0, mask+32(%rip)
	vmovups	%ymm0, mask(%rip)
	cmpl	$1023, %edi             # imm = 0x3FF
	jbe	.LBB0_1
# %bb.2:
	cmpl	$1023, %esi             # imm = 0x3FF
	jbe	.LBB0_3
.LBB0_4:
	movl	$128, %esi
	movl	$mask, %edx
	xorl	%edi, %edi
	vzeroupper
	jmp	sched_setaffinity       # TAILCALL
.LBB0_1:
	movslq	%edi, %rax
	movl	$1, %ecx
	shlxq	%rax, %rcx, %rcx
	shrq	$6, %rax
	orq	%rcx, mask(,%rax,8)
	cmpl	$1023, %esi             # imm = 0x3FF
	ja	.LBB0_4
.LBB0_3:
	movslq	%esi, %rax
	movl	$1, %ecx
	shlxq	%rax, %rcx, %rcx
	shrq	$6, %rax
	orq	%rcx, mask(,%rax,8)
	movl	$128, %esi
	movl	$mask, %edx
	xorl	%edi, %edi
	vzeroupper
	jmp	sched_setaffinity       # TAILCALL
.Lfunc_end0:
	.size	assignToThisCore12, .Lfunc_end0-assignToThisCore12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function assignImagef32
.LCPI1_0:
	.quad	4536524183238306033     # double 2.0000000000000002E-5
.LCPI1_1:
	.quad	4532020583610935537     # double 1.0000000000000001E-5
.LCPI1_2:
	.quad	4593527504729830064     # double 0.123
	.text
	.globl	assignImagef32
	.p2align	4, 0x90
	.type	assignImagef32,@function
assignImagef32:                         # @assignImagef32
	.cfi_startproc
# %bb.0:
	addq	$4, %rdi
	xorl	%r9d, %r9d
	vmovsd	.LCPI1_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	.LCPI1_1(%rip), %xmm1   # xmm1 = mem[0],zero
	vmovsd	.LCPI1_2(%rip), %xmm2   # xmm2 = mem[0],zero
	.p2align	4, 0x90
.LBB1_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_2 Depth 2
	vcvtsi2sd	%r9d, %xmm6, %xmm3
	vmulsd	%xmm0, %xmm3, %xmm3
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB1_2:                                #   Parent Loop BB1_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%esi, %ecx
	leal	1(%rsi), %r8d
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%r8d
	imull	%r9d, %ecx
	addl	%r9d, %ecx
	addl	%ecx, %eax
	movl	%eax, %ecx
	shrl	%ecx
	imulq	$1195121335, %rcx, %rcx # imm = 0x473C1AB7
	shrq	$37, %rcx
	imull	$230, %ecx, %ecx
	subl	%ecx, %eax
	vcvtsi2sd	%eax, %xmm6, %xmm4
	vcvtsi2sd	%esi, %xmm6, %xmm5
	vmulsd	%xmm1, %xmm5, %xmm5
	vaddsd	%xmm4, %xmm5, %xmm4
	vaddsd	%xmm4, %xmm3, %xmm4
	vaddsd	%xmm2, %xmm4, %xmm4
	vcvtsd2ss	%xmm4, %xmm4, %xmm4
	vmovss	%xmm4, -4(%rdi,%rsi,4)
	leaq	2(%rsi), %rcx
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%esi, %edx
	orl	$1, %edx
	imull	%r9d, %edx
	addl	%r9d, %edx
	addl	%edx, %eax
	movl	%eax, %edx
	shrl	%edx
	imulq	$1195121335, %rdx, %rdx # imm = 0x473C1AB7
	shrq	$37, %rdx
	imull	$230, %edx, %edx
	subl	%edx, %eax
	vcvtsi2sd	%eax, %xmm6, %xmm4
	vcvtsi2sd	%r8d, %xmm6, %xmm5
	vmulsd	%xmm1, %xmm5, %xmm5
	vaddsd	%xmm4, %xmm5, %xmm4
	vaddsd	%xmm4, %xmm3, %xmm4
	vaddsd	%xmm2, %xmm4, %xmm4
	vcvtsd2ss	%xmm4, %xmm4, %xmm4
	vmovss	%xmm4, (%rdi,%rsi,4)
	movq	%rcx, %rsi
	cmpq	$1024, %rcx             # imm = 0x400
	jne	.LBB1_2
# %bb.3:                                #   in Loop: Header=BB1_1 Depth=1
	incq	%r9
	addq	$4112, %rdi             # imm = 0x1010
	cmpq	$1024, %r9              # imm = 0x400
	jne	.LBB1_1
# %bb.4:
	retq
.Lfunc_end1:
	.size	assignImagef32, .Lfunc_end1-assignImagef32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function assignMatrixf32
.LCPI2_0:
	.quad	4593527504729830064     # double 0.123
	.text
	.globl	assignMatrixf32
	.p2align	4, 0x90
	.type	assignMatrixf32,@function
assignMatrixf32:                        # @assignMatrixf32
	.cfi_startproc
# %bb.0:
	xorl	%r8d, %r8d
	vmovsd	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero
	.p2align	4, 0x90
.LBB2_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
	movl	$1, %esi
	movl	$2, %r9d
	xorl	%r10d, %r10d
	.p2align	4, 0x90
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%r8d, %eax
	xorl	%edx, %edx
	divl	%esi
                                        # kill: def $eax killed $eax def $rax
	movl	%r10d, %edx
	imull	%r8d, %edx
	addl	%edx, %eax
	imulq	$274877907, %rax, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %edx       # imm = 0x3E8
	subl	%edx, %eax
	vcvtsi2sd	%eax, %xmm2, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm1
	vcvtsd2ss	%xmm1, %xmm1, %xmm1
	movl	%r10d, %ecx
	vmovss	%xmm1, -4(%rdi,%rsi,4)
	movl	%r8d, %eax
	xorl	%edx, %edx
	divl	%r9d
                                        # kill: def $eax killed $eax def $rax
	orl	$1, %ecx
	imull	%r8d, %ecx
	addl	%ecx, %eax
	imulq	$274877907, %rax, %rcx  # imm = 0x10624DD3
	shrq	$38, %rcx
	imull	$1000, %ecx, %ecx       # imm = 0x3E8
	subl	%ecx, %eax
	vcvtsi2sd	%eax, %xmm2, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm1
	vcvtsd2ss	%xmm1, %xmm1, %xmm1
	addq	$2, %r10
	vmovss	%xmm1, (%rdi,%rsi,4)
	addq	$2, %rsi
	addl	$2, %r9d
	cmpq	$1025, %rsi             # imm = 0x401
	jne	.LBB2_2
# %bb.3:                                #   in Loop: Header=BB2_1 Depth=1
	incq	%r8
	addq	$4096, %rdi             # imm = 0x1000
	cmpq	$1024, %r8              # imm = 0x400
	jne	.LBB2_1
# %bb.4:
	retq
.Lfunc_end2:
	.size	assignMatrixf32, .Lfunc_end2-assignMatrixf32
	.cfi_endproc
                                        # -- End function
	.globl	assignImagei32          # -- Begin function assignImagei32
	.p2align	4, 0x90
	.type	assignImagei32,@function
assignImagei32:                         # @assignImagei32
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	xorl	%r9d, %r9d
	movl	$2155905153, %r8d       # imm = 0x80808081
	.p2align	4, 0x90
.LBB3_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_2 Depth 2
	movl	$1, %esi
	movl	$2, %r10d
	xorl	%r11d, %r11d
	.p2align	4, 0x90
.LBB3_2:                                #   Parent Loop BB3_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%r11d, %ecx
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%esi
                                        # kill: def $eax killed $eax def $rax
	imull	%r9d, %ecx
	movl	%r11d, %ebx
	orl	$1, %ebx
	addl	%ecx, %eax
	movq	%rax, %rcx
	imulq	%r8, %rcx
	shrq	$39, %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	subl	%edx, %ecx
	addl	%eax, %ecx
	movl	%ecx, -4(%rdi,%rsi,4)
	movl	%r9d, %eax
	xorl	%edx, %edx
	divl	%r10d
                                        # kill: def $eax killed $eax def $rax
	imull	%r9d, %ebx
	addq	$2, %r11
	addl	%ebx, %eax
	movq	%rax, %rcx
	imulq	%r8, %rcx
	shrq	$39, %rcx
	movl	%ecx, %edx
	shll	$8, %edx
	subl	%edx, %ecx
	addl	%eax, %ecx
	movl	%ecx, (%rdi,%rsi,4)
	addq	$2, %rsi
	addl	$2, %r10d
	cmpq	$1025, %rsi             # imm = 0x401
	jne	.LBB3_2
# %bb.3:                                #   in Loop: Header=BB3_1 Depth=1
	incq	%r9
	addq	$4112, %rdi             # imm = 0x1010
	cmpq	$1024, %r9              # imm = 0x400
	jne	.LBB3_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end3:
	.size	assignImagei32, .Lfunc_end3-assignImagei32
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi32         # -- Begin function assignMatrixi32
	.p2align	4, 0x90
	.type	assignMatrixi32,@function
assignMatrixi32:                        # @assignMatrixi32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	addq	$12, %rdi
	xorl	%r8d, %r8d
	xorl	%r11d, %r11d
	xorl	%r9d, %r9d
	xorl	%r10d, %r10d
	.p2align	4, 0x90
.LBB4_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_2 Depth 2
	xorl	%r13d, %r13d
	movl	%r10d, %ebp
	movl	%r8d, %esi
	movl	%r9d, %ecx
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB4_2:                                #   Parent Loop BB4_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ecx, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %eax       # imm = 0x3E8
	movl	%ecx, %r14d
	subl	%eax, %r14d
	movl	%esi, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %r15d      # imm = 0x3E8
	movl	%esi, %r12d
	subl	%r15d, %r12d
	movl	%ebp, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %eax       # imm = 0x3E8
	movl	%ebp, %edx
	subl	%eax, %edx
	movl	%r13d, %eax
	imulq	$274877907, %rax, %rax  # imm = 0x10624DD3
	shrq	$38, %rax
	imull	$1000, %eax, %r15d      # imm = 0x3E8
	movl	%r13d, %eax
	subl	%r15d, %eax
	movl	%eax, -12(%rdi,%rbx,4)
	movl	%edx, -8(%rdi,%rbx,4)
	movl	%r12d, -4(%rdi,%rbx,4)
	movl	%r14d, (%rdi,%rbx,4)
	addq	$4, %rbx
	addl	%r11d, %ecx
	addl	%r11d, %esi
	addl	%r11d, %ebp
	addl	%r11d, %r13d
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB4_2
# %bb.3:                                #   in Loop: Header=BB4_1 Depth=1
	incq	%r10
	addl	$3, %r9d
	addl	$4, %r11d
	addq	$4096, %rdi             # imm = 0x1000
	addl	$2, %r8d
	cmpq	$1024, %r10             # imm = 0x400
	jne	.LBB4_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end4:
	.size	assignMatrixi32, .Lfunc_end4-assignMatrixi32
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi16         # -- Begin function assignMatrixi16
	.p2align	4, 0x90
	.type	assignMatrixi16,@function
assignMatrixi16:                        # @assignMatrixi16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB5_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_2 Depth 2
	xorl	%ebp, %ebp
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB5_2:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebp, %eax
	shrl	%eax
	imulq	$558694933, %rax, %rax  # imm = 0x214D0215
	shrq	$36, %rax
	imull	$246, %eax, %eax
	movl	%ebp, %r12d
	subl	%eax, %r12d
	callq	rand
	cltq
	imulq	$1717986919, %rax, %rcx # imm = 0x66666667
	movq	%rcx, %rdx
	shrq	$63, %rdx
	sarq	$34, %rcx
	addl	%edx, %ecx
	addl	%ecx, %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	addl	%r12d, %eax
	movw	%ax, (%r14,%rbx,2)
	incq	%rbx
	addl	%r15d, %ebp
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB5_2
# %bb.3:                                #   in Loop: Header=BB5_1 Depth=1
	incq	%r15
	addq	$2048, %r14             # imm = 0x800
	cmpq	$1024, %r15             # imm = 0x400
	jne	.LBB5_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end5:
	.size	assignMatrixi16, .Lfunc_end5-assignMatrixi16
	.cfi_endproc
                                        # -- End function
	.globl	assignImagei16          # -- Begin function assignImagei16
	.p2align	4, 0x90
	.type	assignImagei16,@function
assignImagei16:                         # @assignImagei16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB6_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_2 Depth 2
	xorl	%ebp, %ebp
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB6_2:                                #   Parent Loop BB6_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebp, %eax
	shrl	%eax
	imulq	$558694933, %rax, %rax  # imm = 0x214D0215
	shrq	$36, %rax
	imull	$246, %eax, %eax
	movl	%ebp, %r12d
	subl	%eax, %r12d
	callq	rand
	cltq
	imulq	$1717986919, %rax, %rcx # imm = 0x66666667
	movq	%rcx, %rdx
	shrq	$63, %rdx
	sarq	$34, %rcx
	addl	%edx, %ecx
	addl	%ecx, %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	addl	%r12d, %eax
	movw	%ax, (%r14,%rbx,2)
	incq	%rbx
	addl	%r15d, %ebp
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB6_2
# %bb.3:                                #   in Loop: Header=BB6_1 Depth=1
	incq	%r15
	addq	$2048, %r14             # imm = 0x800
	cmpq	$1024, %r15             # imm = 0x400
	jne	.LBB6_1
# %bb.4:
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end6:
	.size	assignImagei16, .Lfunc_end6-assignImagei16
	.cfi_endproc
                                        # -- End function
	.globl	imageTranspose          # -- Begin function imageTranspose
	.p2align	4, 0x90
	.type	imageTranspose,@function
imageTranspose:                         # @imageTranspose
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	leaq	12(%rdi), %rdx
	testq	%r9, %r9
	jne	.LBB7_2
	.p2align	4, 0x90
.LBB7_9:                                # =>This Inner Loop Header: Depth=1
	incq	%r9
	addq	$4108, %rdx             # imm = 0x100C
	addq	$4, %r8
	addq	$4108, %rdi             # imm = 0x100C
	cmpq	$1024, %r9              # imm = 0x400
	je	.LBB7_10
# %bb.1:                                #   in Loop: Header=BB7_9 Depth=1
	testq	%r9, %r9
	je	.LBB7_9
.LBB7_2:
	movl	%r9d, %r10d
	andl	$3, %r10d
	leaq	-1(%r9), %rax
	cmpq	$3, %rax
	jae	.LBB7_4
# %bb.3:
	xorl	%ecx, %ecx
	testb	$3, %r9b
	jne	.LBB7_7
	jmp	.LBB7_9
	.p2align	4, 0x90
.LBB7_4:
	movq	%r9, %r11
	subq	%r10, %r11
	movq	%r8, %rsi
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB7_5:                                # =>This Inner Loop Header: Depth=1
	movl	-12(%rdx,%rcx,4), %eax
	movl	(%rsi), %ebx
	movl	%ebx, -12(%rdx,%rcx,4)
	movl	%eax, (%rsi)
	movl	-8(%rdx,%rcx,4), %eax
	movl	4108(%rsi), %ebx
	movl	%ebx, -8(%rdx,%rcx,4)
	movl	%eax, 4108(%rsi)
	movl	-4(%rdx,%rcx,4), %eax
	movl	8216(%rsi), %ebx
	movl	%ebx, -4(%rdx,%rcx,4)
	movl	%eax, 8216(%rsi)
	movl	(%rdx,%rcx,4), %eax
	movl	12324(%rsi), %ebx
	movl	%ebx, (%rdx,%rcx,4)
	movl	%eax, 12324(%rsi)
	addq	$4, %rcx
	addq	$16432, %rsi            # imm = 0x4030
	cmpq	%rcx, %r11
	jne	.LBB7_5
# %bb.6:
	testb	$3, %r9b
	je	.LBB7_9
.LBB7_7:
	imulq	$4108, %rcx, %rax       # imm = 0x100C
	addq	%r8, %rax
	leaq	(%rdi,%rcx,4), %r11
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB7_8:                                # =>This Inner Loop Header: Depth=1
	movl	(%r11,%rsi,4), %ebx
	movl	(%rax), %ecx
	movl	%ecx, (%r11,%rsi,4)
	movl	%ebx, (%rax)
	addq	$4108, %rax             # imm = 0x100C
	incq	%rsi
	cmpq	%rsi, %r10
	jne	.LBB7_8
	jmp	.LBB7_9
.LBB7_10:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end7:
	.size	imageTranspose, .Lfunc_end7-imageTranspose
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function assignMatrixui16
.LCPI8_0:
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
	.long	12                      # 0xc
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	15                      # 0xf
.LCPI8_1:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
.LCPI8_2:
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	4                       # 0x4
	.byte	5                       # 0x5
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	14                      # 0xe
	.byte	15                      # 0xf
	.byte	16                      # 0x10
	.byte	17                      # 0x11
	.byte	20                      # 0x14
	.byte	21                      # 0x15
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	30                      # 0x1e
	.byte	31                      # 0x1f
.LCPI8_3:
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
	.short	10                      # 0xa
.LCPI8_4:
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
	.short	26                      # 0x1a
.LCPI8_6:
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
	.short	42                      # 0x2a
.LCPI8_7:
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.short	58                      # 0x3a
	.section	.rodata,"a",@progbits
	.p2align	1
.LCPI8_5:
	.short	255                     # 0xff
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI8_8:
	.long	64                      # 0x40
	.text
	.globl	assignMatrixui16
	.p2align	4, 0x90
	.type	assignMatrixui16,@function
assignMatrixui16:                       # @assignMatrixui16
	.cfi_startproc
# %bb.0:
	addq	$96, %rdi
	xorl	%eax, %eax
	vmovdqa	.LCPI8_0(%rip), %ymm12  # ymm12 = [8,9,10,11,12,13,14,15]
	vmovdqa	.LCPI8_1(%rip), %ymm1   # ymm1 = [0,1,2,3,4,5,6,7]
	vmovdqa	.LCPI8_2(%rip), %ymm2   # ymm2 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
	vmovdqa	.LCPI8_3(%rip), %ymm3   # ymm3 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	vmovdqa	.LCPI8_4(%rip), %ymm4   # ymm4 = [26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26]
	vpbroadcastw	.LCPI8_5(%rip), %ymm5 # ymm5 = [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255]
	vmovdqa	.LCPI8_6(%rip), %ymm6   # ymm6 = [42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42]
	vmovdqa	.LCPI8_7(%rip), %ymm7   # ymm7 = [58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58]
	vpbroadcastd	.LCPI8_8(%rip), %ymm8 # ymm8 = [64,64,64,64,64,64,64,64]
	.p2align	4, 0x90
.LBB8_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_2 Depth 2
	vmovd	%eax, %xmm0
	vpbroadcastd	%xmm0, %ymm9
	xorl	%ecx, %ecx
	vmovdqa	%ymm1, %ymm10
	vmovdqa	%ymm12, %ymm11
	.p2align	4, 0x90
.LBB8_2:                                #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vpaddd	%ymm9, %ymm11, %ymm0
	vpaddd	%ymm9, %ymm10, %ymm13
	vpshufb	%ymm2, %ymm13, %ymm13
	vpermq	$232, %ymm13, %ymm13    # ymm13 = ymm13[0,2,2,3]
	vpshufb	%ymm2, %ymm0, %ymm0
	vpermq	$232, %ymm0, %ymm0      # ymm0 = ymm0[0,2,2,3]
	vinserti128	$1, %xmm0, %ymm13, %ymm14
	vpaddw	%ymm3, %ymm14, %ymm15
	vinserti128	$1, %xmm0, %ymm13, %ymm0
	vpaddw	%ymm4, %ymm0, %ymm13
	vpand	%ymm5, %ymm15, %ymm15
	vpand	%ymm5, %ymm13, %ymm13
	vmovdqu	%ymm15, -96(%rdi,%rcx,2)
	vmovdqu	%ymm13, -64(%rdi,%rcx,2)
	vpaddw	%ymm6, %ymm14, %ymm13
	vpaddw	%ymm7, %ymm0, %ymm0
	vpand	%ymm5, %ymm13, %ymm13
	vpand	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm13, -32(%rdi,%rcx,2)
	vmovdqu	%ymm0, (%rdi,%rcx,2)
	addq	$64, %rcx
	vpaddd	%ymm8, %ymm10, %ymm10
	vpaddd	%ymm8, %ymm11, %ymm11
	cmpq	$1024, %rcx             # imm = 0x400
	jne	.LBB8_2
# %bb.3:                                #   in Loop: Header=BB8_1 Depth=1
	incq	%rax
	addq	$2048, %rdi             # imm = 0x800
	cmpq	$1024, %rax             # imm = 0x400
	jne	.LBB8_1
# %bb.4:
	vzeroupper
	retq
.Lfunc_end8:
	.size	assignMatrixui16, .Lfunc_end8-assignMatrixui16
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi8          # -- Begin function assignMatrixi8
	.p2align	4, 0x90
	.type	assignMatrixi8,@function
assignMatrixi8:                         # @assignMatrixi8
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB9_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_2 Depth 2
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB9_2:                                #   Parent Loop BB9_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	rand
	movl	%eax, %ecx
	shrl	$31, %ecx
	addl	%eax, %ecx
	andl	$254, %ecx
	subl	%ecx, %eax
	addb	%r12b, %al
	movb	%al, (%r14,%rbx)
	incq	%rbx
	addb	%r15b, %r12b
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB9_2
# %bb.3:                                #   in Loop: Header=BB9_1 Depth=1
	incq	%r15
	addq	$1024, %r14             # imm = 0x400
	cmpq	$1024, %r15             # imm = 0x400
	jne	.LBB9_1
# %bb.4:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end9:
	.size	assignMatrixi8, .Lfunc_end9-assignMatrixi8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function assignArrayi32
.LCPI10_0:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
.LCPI10_1:
	.long	1234                    # 0x4d2
	.long	1235                    # 0x4d3
	.long	1236                    # 0x4d4
	.long	1237                    # 0x4d5
	.long	1238                    # 0x4d6
	.long	1239                    # 0x4d7
	.long	1240                    # 0x4d8
	.long	1241                    # 0x4d9
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI10_2:
	.long	274877907               # 0x10624dd3
.LCPI10_3:
	.long	1000                    # 0x3e8
.LCPI10_4:
	.long	8                       # 0x8
.LCPI10_5:
	.long	16                      # 0x10
.LCPI10_6:
	.long	24                      # 0x18
.LCPI10_7:
	.long	32                      # 0x20
	.text
	.globl	assignArrayi32
	.p2align	4, 0x90
	.type	assignArrayi32,@function
assignArrayi32:                         # @assignArrayi32
	.cfi_startproc
# %bb.0:
	vmovdqa	.LCPI10_0(%rip), %ymm0  # ymm0 = [0,1,2,3,4,5,6,7]
	vmovdqa	.LCPI10_1(%rip), %ymm1  # ymm1 = [1234,1235,1236,1237,1238,1239,1240,1241]
	xorl	%eax, %eax
	vpbroadcastd	.LCPI10_2(%rip), %ymm2 # ymm2 = [274877907,274877907,274877907,274877907,274877907,274877907,274877907,274877907]
	vpbroadcastd	.LCPI10_3(%rip), %ymm3 # ymm3 = [1000,1000,1000,1000,1000,1000,1000,1000]
	vpbroadcastd	.LCPI10_4(%rip), %ymm4 # ymm4 = [8,8,8,8,8,8,8,8]
	vpbroadcastd	.LCPI10_5(%rip), %ymm5 # ymm5 = [16,16,16,16,16,16,16,16]
	vpbroadcastd	.LCPI10_6(%rip), %ymm6 # ymm6 = [24,24,24,24,24,24,24,24]
	vpbroadcastd	.LCPI10_7(%rip), %ymm7 # ymm7 = [32,32,32,32,32,32,32,32]
	.p2align	4, 0x90
.LBB10_1:                               # =>This Inner Loop Header: Depth=1
	vpmulld	%ymm0, %ymm1, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, (%rdi,%rax,4)
	vpaddd	%ymm4, %ymm1, %ymm8
	vpaddd	%ymm4, %ymm0, %ymm9
	vpmulld	%ymm9, %ymm8, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, 32(%rdi,%rax,4)
	vpaddd	%ymm5, %ymm1, %ymm8
	vpaddd	%ymm5, %ymm0, %ymm9
	vpmulld	%ymm9, %ymm8, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, 64(%rdi,%rax,4)
	vpaddd	%ymm6, %ymm1, %ymm8
	vpaddd	%ymm6, %ymm0, %ymm9
	vpmulld	%ymm9, %ymm8, %ymm8
	vpshufd	$245, %ymm8, %ymm9      # ymm9 = ymm8[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm2, %ymm9, %ymm9
	vpmuludq	%ymm2, %ymm8, %ymm10
	vpshufd	$245, %ymm10, %ymm10    # ymm10 = ymm10[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm9, %ymm10, %ymm9 # ymm9 = ymm10[0],ymm9[1],ymm10[2],ymm9[3],ymm10[4],ymm9[5],ymm10[6],ymm9[7]
	vpsrld	$6, %ymm9, %ymm9
	vpmulld	%ymm3, %ymm9, %ymm9
	vpsubd	%ymm9, %ymm8, %ymm8
	vmovdqu	%ymm8, 96(%rdi,%rax,4)
	addq	$32, %rax
	vpaddd	%ymm7, %ymm1, %ymm1
	vpaddd	%ymm7, %ymm0, %ymm0
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB10_1
# %bb.2:
	vzeroupper
	retq
.Lfunc_end10:
	.size	assignArrayi32, .Lfunc_end10-assignArrayi32
	.cfi_endproc
                                        # -- End function
	.globl	savefloatMatrixFileForOutPuts # -- Begin function savefloatMatrixFileForOutPuts
	.p2align	4, 0x90
	.type	savefloatMatrixFileForOutPuts,@function
savefloatMatrixFileForOutPuts:          # @savefloatMatrixFileForOutPuts
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	$.L.str.4, %edi
	movl	$.L.str.5, %esi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	xorl	%r15d, %r15d
	movl	$.L.str.6, %esi
	movq	%rax, %rdi
	movl	$1024, %ecx             # imm = 0x400
	movl	$1024, %r8d             # imm = 0x400
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	.p2align	4, 0x90
.LBB11_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_2 Depth 2
	movl	$.L.str.7, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB11_2:                               #   Parent Loop BB11_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	vmovss	(%r14,%rbx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movl	$.L.str.8, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	movb	$1, %al
	callq	fprintf
	incq	%rbx
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB11_2
# %bb.3:                                #   in Loop: Header=BB11_1 Depth=1
	incq	%r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$4096, %r14             # imm = 0x1000
	cmpq	$1024, %r15             # imm = 0x400
	jne	.LBB11_1
# %bb.4:
	movl	$.L.str.9, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end11:
	.size	savefloatMatrixFileForOutPuts, .Lfunc_end11-savefloatMatrixFileForOutPuts
	.cfi_endproc
                                        # -- End function
	.globl	savefloatMatrixFileName # -- Begin function savefloatMatrixFileName
	.p2align	4, 0x90
	.type	savefloatMatrixFileName,@function
savefloatMatrixFileName:                # @savefloatMatrixFileName
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rax
	movq	%rdi, %r14
	movl	$.L.str.5, %esi
	movq	%rax, %rdi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	xorl	%r15d, %r15d
	movl	$.L.str.6, %esi
	movq	%rax, %rdi
	movl	$1024, %ecx             # imm = 0x400
	movl	$1024, %r8d             # imm = 0x400
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	.p2align	4, 0x90
.LBB12_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_2 Depth 2
	movl	$.L.str.7, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB12_2:                               #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	vmovss	(%r14,%rbx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movl	$.L.str.8, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	movb	$1, %al
	callq	fprintf
	incq	%rbx
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB12_2
# %bb.3:                                #   in Loop: Header=BB12_1 Depth=1
	incq	%r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$4096, %r14             # imm = 0x1000
	cmpq	$1024, %r15             # imm = 0x400
	jne	.LBB12_1
# %bb.4:
	movl	$.L.str.9, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end12:
	.size	savefloatMatrixFileName, .Lfunc_end12-savefloatMatrixFileName
	.cfi_endproc
                                        # -- End function
	.globl	saveintMatrixFileForOutPuts # -- Begin function saveintMatrixFileForOutPuts
	.p2align	4, 0x90
	.type	saveintMatrixFileForOutPuts,@function
saveintMatrixFileForOutPuts:            # @saveintMatrixFileForOutPuts
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	$.L.str.4, %edi
	movl	$.L.str.5, %esi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	movl	$.L.str.6, %esi
	movq	%rax, %rdi
	movl	$1024, %ecx             # imm = 0x400
	movl	$1024, %r8d             # imm = 0x400
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB13_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_2 Depth 2
	movl	$.L.str.7, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB13_2:                               #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	movl	(%r14,%rbx,4), %r8d
	movl	$.L.str.10, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	xorl	%eax, %eax
	callq	fprintf
	incq	%rbx
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB13_2
# %bb.3:                                #   in Loop: Header=BB13_1 Depth=1
	incq	%r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$4096, %r14             # imm = 0x1000
	cmpq	$1024, %r15             # imm = 0x400
	jne	.LBB13_1
# %bb.4:
	movl	$.L.str.9, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end13:
	.size	saveintMatrixFileForOutPuts, .Lfunc_end13-saveintMatrixFileForOutPuts
	.cfi_endproc
                                        # -- End function
	.globl	saveintMatrixFileName   # -- Begin function saveintMatrixFileName
	.p2align	4, 0x90
	.type	saveintMatrixFileName,@function
saveintMatrixFileName:                  # @saveintMatrixFileName
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rax
	movq	%rdi, %r14
	movl	$.L.str.5, %esi
	movq	%rax, %rdi
	callq	fopen
	movq	%rax, fileForOutPuts(%rip)
	movq	programName(%rip), %rdx
	movl	$.L.str.6, %esi
	movq	%rax, %rdi
	movl	$1024, %ecx             # imm = 0x400
	movl	$1024, %r8d             # imm = 0x400
	xorl	%eax, %eax
	callq	fprintf
	movq	fileForOutPuts(%rip), %rcx
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB14_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_2 Depth 2
	movl	$.L.str.7, %edi
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB14_2:                               #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	fileForOutPuts(%rip), %rdi
	movl	(%r14,%rbx,4), %r8d
	movl	$.L.str.10, %esi
	movl	%r15d, %edx
	movl	%ebx, %ecx
	xorl	%eax, %eax
	callq	fprintf
	incq	%rbx
	cmpq	$1024, %rbx             # imm = 0x400
	jne	.LBB14_2
# %bb.3:                                #   in Loop: Header=BB14_1 Depth=1
	incq	%r15
	movq	fileForOutPuts(%rip), %rcx
	addq	$4096, %r14             # imm = 0x1000
	cmpq	$1024, %r15             # imm = 0x400
	jne	.LBB14_1
# %bb.4:
	movl	$.L.str.9, %edi
	movl	$98, %esi
	movl	$1, %edx
	callq	fwrite
	movq	fileForOutPuts(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose                  # TAILCALL
.Lfunc_end14:
	.size	saveintMatrixFileName, .Lfunc_end14-saveintMatrixFileName
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function main
.LCPI15_0:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI15_1:
	.long	8                       # 0x8
.LCPI15_2:
	.long	16                      # 0x10
.LCPI15_3:
	.long	24                      # 0x18
.LCPI15_4:
	.long	32                      # 0x20
.LCPI15_5:
	.long	48                      # 0x30
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	movq	$.L.str.11, programName(%rip)
	vmovdqa	.LCPI15_0(%rip), %ymm0  # ymm0 = [0,1,2,3,4,5,6,7]
	movq	$-4096, %rax            # imm = 0xF000
	vpbroadcastd	.LCPI15_1(%rip), %ymm1 # ymm1 = [8,8,8,8,8,8,8,8]
	vpbroadcastd	.LCPI15_2(%rip), %ymm2 # ymm2 = [16,16,16,16,16,16,16,16]
	vpbroadcastd	.LCPI15_3(%rip), %ymm3 # ymm3 = [24,24,24,24,24,24,24,24]
	vpbroadcastd	.LCPI15_4(%rip), %ymm4 # ymm4 = [32,32,32,32,32,32,32,32]
	vpbroadcastd	.LCPI15_5(%rip), %ymm5 # ymm5 = [48,48,48,48,48,48,48,48]
	vmovdqa	%ymm0, %ymm6
	.p2align	4, 0x90
.LBB15_1:                               # =>This Inner Loop Header: Depth=1
	vpaddd	%ymm1, %ymm0, %ymm7
	vpaddd	%ymm2, %ymm0, %ymm8
	vpaddd	%ymm3, %ymm0, %ymm9
	vpmulld	%ymm0, %ymm0, %ymm10
	vpmulld	%ymm7, %ymm7, %ymm7
	vpmulld	%ymm8, %ymm8, %ymm8
	vpmulld	%ymm9, %ymm9, %ymm9
	vmovdqu	%ymm10, a+4096(%rax)
	vmovdqu	%ymm7, a+4128(%rax)
	vmovdqu	%ymm8, a+4160(%rax)
	vmovdqu	%ymm9, a+4192(%rax)
	vpaddd	%ymm6, %ymm6, %ymm7
	vpaddd	%ymm2, %ymm7, %ymm8
	vpaddd	%ymm4, %ymm7, %ymm9
	vmovdqu	%ymm7, b+4096(%rax)
	vmovdqu	%ymm8, b+4128(%rax)
	vmovdqu	%ymm9, b+4160(%rax)
	vpaddd	%ymm5, %ymm7, %ymm7
	vmovdqu	%ymm7, b+4192(%rax)
	vpaddd	%ymm4, %ymm0, %ymm0
	vpaddd	%ymm4, %ymm6, %ymm6
	subq	$-128, %rax
	jne	.LBB15_1
# %bb.2:
	#APP
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm1
	#NO_APP
	movq	$-4096, %rax            # imm = 0xF000
	.p2align	4, 0x90
.LBB15_3:                               # =>This Inner Loop Header: Depth=1
	vmovdqu	b+4096(%rax), %ymm0
	vmovdqu	b+4128(%rax), %ymm1
	vmovdqu	b+4160(%rax), %ymm2
	vmovdqu	b+4192(%rax), %ymm3
	vpaddd	a+4096(%rax), %ymm0, %ymm0
	vpaddd	a+4128(%rax), %ymm1, %ymm1
	vpaddd	a+4160(%rax), %ymm2, %ymm2
	vpaddd	a+4192(%rax), %ymm3, %ymm3
	vmovdqu	%ymm0, c+4096(%rax)
	vmovdqu	%ymm1, c+4128(%rax)
	vmovdqu	%ymm2, c+4160(%rax)
	vmovdqu	%ymm3, c+4192(%rax)
	vmovdqu	b+4224(%rax), %ymm0
	vmovdqu	b+4256(%rax), %ymm1
	vmovdqu	b+4288(%rax), %ymm2
	vmovdqu	b+4320(%rax), %ymm3
	vpaddd	a+4224(%rax), %ymm0, %ymm0
	vpaddd	a+4256(%rax), %ymm1, %ymm1
	vpaddd	a+4288(%rax), %ymm2, %ymm2
	vpaddd	a+4320(%rax), %ymm3, %ymm3
	vmovdqu	%ymm0, c+4224(%rax)
	vmovdqu	%ymm1, c+4256(%rax)
	vmovdqu	%ymm2, c+4288(%rax)
	vmovdqu	%ymm3, c+4320(%rax)
	addq	$256, %rax              # imm = 0x100
	jne	.LBB15_3
# %bb.4:
	#APP
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm2
	#NO_APP
	xorl	%eax, %eax
	vzeroupper
	retq
.Lfunc_end15:
	.size	main, .Lfunc_end15-main
	.cfi_endproc
                                        # -- End function
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"//home/matrin/Desktop/Come with me/I am organized here/004 - Cooperating/Maryam Moradifar/Implementations/ALL (Images)/sample/06 - speckle-0.1/Nlena.pgm"
	.size	.L.str, 153

	.type	filein_name,@object     # @filein_name
	.data
	.globl	filein_name
	.p2align	3
filein_name:
	.quad	.L.str
	.size	filein_name, 8

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"//home/matrin/Desktop/Come with me/I am organized here/004 - Cooperating/Maryam Moradifar/Implementations/ALL (Images)/sample/01 - origin/lena.pgm"
	.size	.L.str.1, 147

	.type	filein_origin,@object   # @filein_origin
	.data
	.globl	filein_origin
	.p2align	3
filein_origin:
	.quad	.L.str.1
	.size	filein_origin, 8

	.type	.L.str.2,@object        # @.str.2
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2:
	.asciz	"06 - speckle-0.1/Nlena.pgm"
	.size	.L.str.2, 27

	.type	filein_nikname,@object  # @filein_nikname
	.data
	.globl	filein_nikname
	.p2align	3
filein_nikname:
	.quad	.L.str.2
	.size	filein_nikname, 8

	.type	fileForSpeedups,@object # @fileForSpeedups
	.bss
	.globl	fileForSpeedups
	.p2align	3
fileForSpeedups:
	.quad	0
	.size	fileForSpeedups, 8

	.type	.L.str.3,@object        # @.str.3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3:
	.asciz	" "
	.size	.L.str.3, 2

	.type	programName,@object     # @programName
	.data
	.globl	programName
	.p2align	3
programName:
	.quad	.L.str.3
	.size	programName, 8

	.type	ttbest_rdtsc,@object    # @ttbest_rdtsc
	.globl	ttbest_rdtsc
	.p2align	3
ttbest_rdtsc:
	.quad	99999999999999999       # 0x16345785d89ffff
	.size	ttbest_rdtsc, 8

	.type	elapsed_rdtsc,@object   # @elapsed_rdtsc
	.globl	elapsed_rdtsc
	.p2align	3
elapsed_rdtsc:
	.quad	99999999                # 0x5f5e0ff
	.size	elapsed_rdtsc, 8

	.type	overal_time,@object     # @overal_time
	.bss
	.globl	overal_time
	.p2align	3
overal_time:
	.quad	0                       # 0x0
	.size	overal_time, 8

	.type	ttime,@object           # @ttime
	.globl	ttime
	.p2align	3
ttime:
	.quad	0                       # 0x0
	.size	ttime, 8

	.type	mask,@object            # @mask
	.comm	mask,128,8
	.type	fileForOutPuts,@object  # @fileForOutPuts
	.globl	fileForOutPuts
	.p2align	3
fileForOutPuts:
	.quad	0
	.size	fileForOutPuts, 8

	.type	.L.str.4,@object        # @.str.4
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4:
	.asciz	"fileForOutPuts"
	.size	.L.str.4, 15

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"w"
	.size	.L.str.5, 2

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"%s - %dx%d \n"
	.size	.L.str.6, 13

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"\n\n"
	.size	.L.str.7, 3

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	" A[%d][%d] = %lf, \n"
	.size	.L.str.8, 20

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	" \n*************************\n*********************FINISHED*********************\n***************** \n"
	.size	.L.str.9, 99

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	" A[%d][%d] = %d, \n"
	.size	.L.str.10, 19

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"Add2Vectors"
	.size	.L.str.11, 12

	.type	a,@object               # @a
	.comm	a,4096,16
	.type	b,@object               # @b
	.comm	b,4096,16
	.type	c,@object               # @c
	.comm	c,4096,16
	.type	fileou_name,@object     # @fileou_name
	.comm	fileou_name,100,16
	.type	mask1,@object           # @mask1
	.comm	mask1,128,8
	.type	t1_rdtsc,@object        # @t1_rdtsc
	.comm	t1_rdtsc,8,8
	.type	t2_rdtsc,@object        # @t2_rdtsc
	.comm	t2_rdtsc,8,8
	.type	ttotal_rdtsc,@object    # @ttotal_rdtsc
	.comm	ttotal_rdtsc,8,8
	.type	elapsed,@object         # @elapsed
	.comm	elapsed,8,8
	.type	temp8,@object           # @temp8
	.comm	temp8,32,32
	.type	temp2i16,@object        # @temp2i16
	.comm	temp2i16,32,32

	.ident	"clang version 9.0.0 (Fedora 9.0.0-1.fc31)"
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym mask
