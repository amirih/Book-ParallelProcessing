	.text
	.file	"VectorAddition.c"
	.globl	assignToThisCore12      # -- Begin function assignToThisCore12
	.p2align	4, 0x90
	.type	assignToThisCore12,@function
assignToThisCore12:                     # @assignToThisCore12
	.cfi_startproc
# %bb.0:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, mask+96(%rip)
	vmovups	%ymm0, mask+64(%rip)
	vmovups	%ymm0, mask+32(%rip)
	vmovups	%ymm0, mask(%rip)
	cmpl	$1023, %edi             # imm = 0x3FF
	jbe	.LBB0_1
# %bb.2:
	cmpl	$1023, %esi             # imm = 0x3FF
	jbe	.LBB0_3
.LBB0_4:
	xorl	%edi, %edi
	movl	$128, %esi
	movl	$mask, %edx
	vzeroupper
	jmp	sched_setaffinity       # TAILCALL
.LBB0_1:
	movslq	%edi, %rax
	movl	$1, %ecx
	shlxq	%rax, %rcx, %rcx
	shrq	$6, %rax
	orq	%rcx, mask(,%rax,8)
	cmpl	$1023, %esi             # imm = 0x3FF
	ja	.LBB0_4
.LBB0_3:
	movslq	%esi, %rax
	movl	$1, %ecx
	shlxq	%rax, %rcx, %rcx
	shrq	$6, %rax
	orq	%rcx, mask(,%rax,8)
	xorl	%edi, %edi
	movl	$128, %esi
	movl	$mask, %edx
	vzeroupper
	jmp	sched_setaffinity       # TAILCALL
.Lfunc_end0:
	.size	assignToThisCore12, .Lfunc_end0-assignToThisCore12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function assignMatrixf32
.LCPI1_0:
	.quad	4593527504729830064     # double 0.123
	.text
	.globl	assignMatrixf32
	.p2align	4, 0x90
	.type	assignMatrixf32,@function
assignMatrixf32:                        # @assignMatrixf32
	.cfi_startproc
# %bb.0:
	addq	$4, %rdi
	xorl	%r8d, %r8d
	vmovsd	.LCPI1_0(%rip), %xmm0   # xmm0 = mem[0],zero
	.p2align	4, 0x90
.LBB1_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_2 Depth 2
	movq	$-128, %rsi
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB1_2:                                #   Parent Loop BB1_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leal	129(%rsi), %r9d
	xorl	%edx, %edx
	movl	%r8d, %eax
	divl	%r9d
                                        # kill: def %eax killed %eax def %rax
	movl	%ecx, %edx
	imull	%r8d, %edx
	addl	%edx, %eax
	imulq	$274877907, %rax, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %edx       # imm = 0x3E8
	subl	%edx, %eax
	vcvtsi2sdl	%eax, %xmm2, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm1
	vcvtsd2ss	%xmm1, %xmm1, %xmm1
	vmovss	%xmm1, 508(%rdi,%rsi,4)
	leal	130(%rsi), %r9d
	xorl	%edx, %edx
	movl	%r8d, %eax
	divl	%r9d
                                        # kill: def %eax killed %eax def %rax
	movl	%ecx, %edx
	orl	$1, %edx
	imull	%r8d, %edx
	addq	$2, %rcx
	addl	%edx, %eax
	imulq	$274877907, %rax, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %edx       # imm = 0x3E8
	subl	%edx, %eax
	vcvtsi2sdl	%eax, %xmm2, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm1
	vcvtsd2ss	%xmm1, %xmm1, %xmm1
	vmovss	%xmm1, 512(%rdi,%rsi,4)
	addq	$2, %rsi
	jne	.LBB1_2
# %bb.3:                                #   in Loop: Header=BB1_1 Depth=1
	addq	$1, %r8
	addq	$512, %rdi              # imm = 0x200
	cmpq	$128, %r8
	jne	.LBB1_1
# %bb.4:
	retq
.Lfunc_end1:
	.size	assignMatrixf32, .Lfunc_end1-assignMatrixf32
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi32         # -- Begin function assignMatrixi32
	.p2align	4, 0x90
	.type	assignMatrixi32,@function
assignMatrixi32:                        # @assignMatrixi32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	addq	$12, %rdi
	xorl	%r8d, %r8d
	xorl	%r11d, %r11d
	xorl	%r9d, %r9d
	xorl	%r10d, %r10d
	.p2align	4, 0x90
.LBB2_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
	movq	$-128, %rax
	xorl	%r13d, %r13d
	movl	%r10d, %ebp
	movl	%r8d, %ecx
	movl	%r9d, %ebx
	.p2align	4, 0x90
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebx, %edx
	imulq	$274877907, %rdx, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %edx       # imm = 0x3E8
	movl	%ebx, %r14d
	subl	%edx, %r14d
	movl	%ecx, %edx
	imulq	$274877907, %rdx, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %r15d      # imm = 0x3E8
	movl	%ecx, %r12d
	subl	%r15d, %r12d
	movl	%ebp, %edx
	imulq	$274877907, %rdx, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %edx       # imm = 0x3E8
	movl	%ebp, %esi
	subl	%edx, %esi
	movl	%r13d, %edx
	imulq	$274877907, %rdx, %rdx  # imm = 0x10624DD3
	shrq	$38, %rdx
	imull	$1000, %edx, %r15d      # imm = 0x3E8
	movl	%r13d, %edx
	subl	%r15d, %edx
	movl	%edx, 500(%rdi,%rax,4)
	movl	%esi, 504(%rdi,%rax,4)
	movl	%r12d, 508(%rdi,%rax,4)
	movl	%r14d, 512(%rdi,%rax,4)
	addl	%r11d, %ebx
	addl	%r11d, %ecx
	addl	%r11d, %ebp
	addl	%r11d, %r13d
	addq	$4, %rax
	jne	.LBB2_2
# %bb.3:                                #   in Loop: Header=BB2_1 Depth=1
	addq	$1, %r10
	addl	$3, %r9d
	addl	$4, %r11d
	addq	$512, %rdi              # imm = 0x200
	addl	$2, %r8d
	cmpq	$128, %r10
	jne	.LBB2_1
# %bb.4:
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end2:
	.size	assignMatrixi32, .Lfunc_end2-assignMatrixi32
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi16         # -- Begin function assignMatrixi16
	.p2align	4, 0x90
	.type	assignMatrixi16,@function
assignMatrixi16:                        # @assignMatrixi16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB3_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_2 Depth 2
	movq	$-128, %rbx
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB3_2:                                #   Parent Loop BB3_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	%bpl, %r12d
	callq	rand
	cltq
	imulq	$1717986919, %rax, %rcx # imm = 0x66666667
	movq	%rcx, %rdx
	shrq	$63, %rdx
	sarq	$34, %rcx
	addl	%edx, %ecx
	addl	%ecx, %ecx
	leal	(%rcx,%rcx,4), %ecx
	subl	%ecx, %eax
	addl	%r12d, %eax
	movw	%ax, 256(%r14,%rbx,2)
	addl	%r15d, %ebp
	addq	$1, %rbx
	jne	.LBB3_2
# %bb.3:                                #   in Loop: Header=BB3_1 Depth=1
	addq	$1, %r15
	addq	$256, %r14              # imm = 0x100
	cmpq	$128, %r15
	jne	.LBB3_1
# %bb.4:
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end3:
	.size	assignMatrixi16, .Lfunc_end3-assignMatrixi16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function assignMatrixui16
.LCPI4_0:
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	4                       # 0x4
	.byte	5                       # 0x5
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	14                      # 0xe
	.byte	15                      # 0xf
	.byte	16                      # 0x10
	.byte	17                      # 0x11
	.byte	20                      # 0x14
	.byte	21                      # 0x15
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	24                      # 0x18
	.byte	25                      # 0x19
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	28                      # 0x1c
	.byte	29                      # 0x1d
	.byte	30                      # 0x1e
	.byte	31                      # 0x1f
.LCPI4_1:
	.short	10                      # 0xa
	.short	11                      # 0xb
	.short	12                      # 0xc
	.short	13                      # 0xd
	.short	14                      # 0xe
	.short	15                      # 0xf
	.short	16                      # 0x10
	.short	17                      # 0x11
	.short	18                      # 0x12
	.short	19                      # 0x13
	.short	20                      # 0x14
	.short	21                      # 0x15
	.short	22                      # 0x16
	.short	23                      # 0x17
	.short	24                      # 0x18
	.short	25                      # 0x19
.LCPI4_2:
	.short	26                      # 0x1a
	.short	27                      # 0x1b
	.short	28                      # 0x1c
	.short	29                      # 0x1d
	.short	30                      # 0x1e
	.short	31                      # 0x1f
	.short	32                      # 0x20
	.short	33                      # 0x21
	.short	34                      # 0x22
	.short	35                      # 0x23
	.short	36                      # 0x24
	.short	37                      # 0x25
	.short	38                      # 0x26
	.short	39                      # 0x27
	.short	40                      # 0x28
	.short	41                      # 0x29
.LCPI4_3:
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	0                       # 0x0
.LCPI4_4:
	.short	42                      # 0x2a
	.short	43                      # 0x2b
	.short	44                      # 0x2c
	.short	45                      # 0x2d
	.short	46                      # 0x2e
	.short	47                      # 0x2f
	.short	48                      # 0x30
	.short	49                      # 0x31
	.short	50                      # 0x32
	.short	51                      # 0x33
	.short	52                      # 0x34
	.short	53                      # 0x35
	.short	54                      # 0x36
	.short	55                      # 0x37
	.short	56                      # 0x38
	.short	57                      # 0x39
.LCPI4_5:
	.short	58                      # 0x3a
	.short	59                      # 0x3b
	.short	60                      # 0x3c
	.short	61                      # 0x3d
	.short	62                      # 0x3e
	.short	63                      # 0x3f
	.short	64                      # 0x40
	.short	65                      # 0x41
	.short	66                      # 0x42
	.short	67                      # 0x43
	.short	68                      # 0x44
	.short	69                      # 0x45
	.short	70                      # 0x46
	.short	71                      # 0x47
	.short	72                      # 0x48
	.short	73                      # 0x49
.LCPI4_6:
	.short	74                      # 0x4a
	.short	75                      # 0x4b
	.short	76                      # 0x4c
	.short	77                      # 0x4d
	.short	78                      # 0x4e
	.short	79                      # 0x4f
	.short	80                      # 0x50
	.short	81                      # 0x51
	.short	82                      # 0x52
	.short	83                      # 0x53
	.short	84                      # 0x54
	.short	85                      # 0x55
	.short	86                      # 0x56
	.short	87                      # 0x57
	.short	88                      # 0x58
	.short	89                      # 0x59
.LCPI4_7:
	.short	90                      # 0x5a
	.short	91                      # 0x5b
	.short	92                      # 0x5c
	.short	93                      # 0x5d
	.short	94                      # 0x5e
	.short	95                      # 0x5f
	.short	96                      # 0x60
	.short	97                      # 0x61
	.short	98                      # 0x62
	.short	99                      # 0x63
	.short	100                     # 0x64
	.short	101                     # 0x65
	.short	102                     # 0x66
	.short	103                     # 0x67
	.short	104                     # 0x68
	.short	105                     # 0x69
.LCPI4_8:
	.short	106                     # 0x6a
	.short	107                     # 0x6b
	.short	108                     # 0x6c
	.short	109                     # 0x6d
	.short	110                     # 0x6e
	.short	111                     # 0x6f
	.short	112                     # 0x70
	.short	113                     # 0x71
	.short	114                     # 0x72
	.short	115                     # 0x73
	.short	116                     # 0x74
	.short	117                     # 0x75
	.short	118                     # 0x76
	.short	119                     # 0x77
	.short	120                     # 0x78
	.short	121                     # 0x79
.LCPI4_9:
	.short	122                     # 0x7a
	.short	123                     # 0x7b
	.short	124                     # 0x7c
	.short	125                     # 0x7d
	.short	126                     # 0x7e
	.short	127                     # 0x7f
	.short	128                     # 0x80
	.short	129                     # 0x81
	.short	130                     # 0x82
	.short	131                     # 0x83
	.short	132                     # 0x84
	.short	133                     # 0x85
	.short	134                     # 0x86
	.short	135                     # 0x87
	.short	136                     # 0x88
	.short	137                     # 0x89
	.text
	.globl	assignMatrixui16
	.p2align	4, 0x90
	.type	assignMatrixui16,@function
assignMatrixui16:                       # @assignMatrixui16
	.cfi_startproc
# %bb.0:
	movq	$-32768, %rax           # imm = 0x8000
	xorl	%ecx, %ecx
	vmovdqa	.LCPI4_0(%rip), %ymm10  # ymm10 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
	vmovdqa	.LCPI4_1(%rip), %ymm1   # ymm1 = [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
	vmovdqa	.LCPI4_2(%rip), %ymm2   # ymm2 = [26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]
	vmovdqa	.LCPI4_3(%rip), %ymm3   # ymm3 = [255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0]
	vmovdqa	.LCPI4_4(%rip), %ymm4   # ymm4 = [42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]
	vmovdqa	.LCPI4_5(%rip), %ymm5   # ymm5 = [58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73]
	vmovdqa	.LCPI4_6(%rip), %ymm6   # ymm6 = [74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89]
	vmovdqa	.LCPI4_7(%rip), %ymm7   # ymm7 = [90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105]
	vmovdqa	.LCPI4_8(%rip), %ymm8   # ymm8 = [106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121]
	vmovdqa	.LCPI4_9(%rip), %ymm9   # ymm9 = [122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137]
	.p2align	4, 0x90
.LBB4_1:                                # =>This Inner Loop Header: Depth=1
	vmovd	%ecx, %xmm0
	vpbroadcastd	%xmm0, %ymm0
	vpshufb	%ymm10, %ymm0, %ymm0
	vpermq	$232, %ymm0, %ymm0      # ymm0 = ymm0[0,2,2,3]
	vinserti128	$1, %xmm0, %ymm0, %ymm0
	vpaddw	%ymm1, %ymm0, %ymm11
	vpaddw	%ymm2, %ymm0, %ymm12
	vpand	%ymm3, %ymm11, %ymm11
	vpand	%ymm3, %ymm12, %ymm12
	vmovdqu	%ymm11, 32768(%rdi,%rax)
	vmovdqu	%ymm12, 32800(%rdi,%rax)
	vpaddw	%ymm4, %ymm0, %ymm11
	vpaddw	%ymm5, %ymm0, %ymm12
	vpand	%ymm3, %ymm11, %ymm11
	vpand	%ymm3, %ymm12, %ymm12
	vmovdqu	%ymm11, 32832(%rdi,%rax)
	vmovdqu	%ymm12, 32864(%rdi,%rax)
	vpaddw	%ymm6, %ymm0, %ymm11
	vpaddw	%ymm7, %ymm0, %ymm12
	vpand	%ymm3, %ymm11, %ymm11
	vpand	%ymm3, %ymm12, %ymm12
	vmovdqu	%ymm11, 32896(%rdi,%rax)
	vmovdqu	%ymm12, 32928(%rdi,%rax)
	vpaddw	%ymm8, %ymm0, %ymm11
	vpaddw	%ymm9, %ymm0, %ymm0
	vpand	%ymm3, %ymm11, %ymm11
	vpand	%ymm3, %ymm0, %ymm0
	vmovdqu	%ymm11, 32960(%rdi,%rax)
	vmovdqu	%ymm0, 32992(%rdi,%rax)
	addl	$1, %ecx
	addq	$256, %rax              # imm = 0x100
	jne	.LBB4_1
# %bb.2:
	vzeroupper
	retq
.Lfunc_end4:
	.size	assignMatrixui16, .Lfunc_end4-assignMatrixui16
	.cfi_endproc
                                        # -- End function
	.globl	assignMatrixi8          # -- Begin function assignMatrixi8
	.p2align	4, 0x90
	.type	assignMatrixi8,@function
assignMatrixi8:                         # @assignMatrixi8
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB5_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_2 Depth 2
	movq	$-128, %rbx
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB5_2:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	rand
	movl	%eax, %ecx
	shrl	$31, %ecx
	addl	%eax, %ecx
	andl	$254, %ecx
	subl	%ecx, %eax
	addl	%ebp, %eax
	movb	%al, 128(%r14,%rbx)
	addl	%r15d, %ebp
	addq	$1, %rbx
	jne	.LBB5_2
# %bb.3:                                #   in Loop: Header=BB5_1 Depth=1
	addq	$1, %r15
	subq	$-128, %r14
	cmpq	$128, %r15
	jne	.LBB5_1
# %bb.4:
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end5:
	.size	assignMatrixi8, .Lfunc_end5-assignMatrixi8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function assignArrayi32
.LCPI6_0:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
.LCPI6_1:
	.long	1234                    # 0x4d2
	.long	1235                    # 0x4d3
	.long	1236                    # 0x4d4
	.long	1237                    # 0x4d5
	.long	1238                    # 0x4d6
	.long	1239                    # 0x4d7
	.long	1240                    # 0x4d8
	.long	1241                    # 0x4d9
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI6_2:
	.long	274877907               # 0x10624dd3
.LCPI6_3:
	.long	1000                    # 0x3e8
.LCPI6_4:
	.long	8                       # 0x8
.LCPI6_5:
	.long	16                      # 0x10
.LCPI6_6:
	.long	24                      # 0x18
.LCPI6_7:
	.long	32                      # 0x20
	.text
	.globl	assignArrayi32
	.p2align	4, 0x90
	.type	assignArrayi32,@function
assignArrayi32:                         # @assignArrayi32
	.cfi_startproc
# %bb.0:
	vmovdqa	.LCPI6_0(%rip), %ymm0   # ymm0 = [0,1,2,3,4,5,6,7]
	vmovdqa	.LCPI6_1(%rip), %ymm1   # ymm1 = [1234,1235,1236,1237,1238,1239,1240,1241]
	movq	$-16384, %rax           # imm = 0xC000
	vpbroadcastd	.LCPI6_2(%rip), %ymm2 # ymm2 = [274877907,274877907,274877907,274877907,274877907,274877907,274877907,274877907]
	vpshufd	$245, %ymm2, %ymm3      # ymm3 = ymm2[1,1,3,3,5,5,7,7]
	vpbroadcastd	.LCPI6_3(%rip), %ymm4 # ymm4 = [1000,1000,1000,1000,1000,1000,1000,1000]
	vpbroadcastd	.LCPI6_4(%rip), %ymm5 # ymm5 = [8,8,8,8,8,8,8,8]
	vpbroadcastd	.LCPI6_5(%rip), %ymm6 # ymm6 = [16,16,16,16,16,16,16,16]
	vpbroadcastd	.LCPI6_6(%rip), %ymm7 # ymm7 = [24,24,24,24,24,24,24,24]
	vpbroadcastd	.LCPI6_7(%rip), %ymm8 # ymm8 = [32,32,32,32,32,32,32,32]
	.p2align	4, 0x90
.LBB6_1:                                # =>This Inner Loop Header: Depth=1
	vpmulld	%ymm0, %ymm1, %ymm9
	vpshufd	$245, %ymm9, %ymm10     # ymm10 = ymm9[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm3, %ymm10, %ymm10
	vpmuludq	%ymm2, %ymm9, %ymm11
	vpshufd	$245, %ymm11, %ymm11    # ymm11 = ymm11[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm10, %ymm11, %ymm10 # ymm10 = ymm11[0],ymm10[1],ymm11[2],ymm10[3],ymm11[4],ymm10[5],ymm11[6],ymm10[7]
	vpsrld	$6, %ymm10, %ymm10
	vpmulld	%ymm4, %ymm10, %ymm10
	vpsubd	%ymm10, %ymm9, %ymm9
	vmovdqu	%ymm9, 65536(%rdi,%rax,4)
	vpaddd	%ymm5, %ymm1, %ymm9
	vpaddd	%ymm5, %ymm0, %ymm10
	vpmulld	%ymm10, %ymm9, %ymm9
	vpshufd	$245, %ymm9, %ymm10     # ymm10 = ymm9[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm3, %ymm10, %ymm10
	vpmuludq	%ymm2, %ymm9, %ymm11
	vpshufd	$245, %ymm11, %ymm11    # ymm11 = ymm11[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm10, %ymm11, %ymm10 # ymm10 = ymm11[0],ymm10[1],ymm11[2],ymm10[3],ymm11[4],ymm10[5],ymm11[6],ymm10[7]
	vpsrld	$6, %ymm10, %ymm10
	vpmulld	%ymm4, %ymm10, %ymm10
	vpsubd	%ymm10, %ymm9, %ymm9
	vmovdqu	%ymm9, 65568(%rdi,%rax,4)
	vpaddd	%ymm6, %ymm1, %ymm9
	vpaddd	%ymm6, %ymm0, %ymm10
	vpmulld	%ymm10, %ymm9, %ymm9
	vpshufd	$245, %ymm9, %ymm10     # ymm10 = ymm9[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm3, %ymm10, %ymm10
	vpmuludq	%ymm2, %ymm9, %ymm11
	vpshufd	$245, %ymm11, %ymm11    # ymm11 = ymm11[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm10, %ymm11, %ymm10 # ymm10 = ymm11[0],ymm10[1],ymm11[2],ymm10[3],ymm11[4],ymm10[5],ymm11[6],ymm10[7]
	vpsrld	$6, %ymm10, %ymm10
	vpmulld	%ymm4, %ymm10, %ymm10
	vpsubd	%ymm10, %ymm9, %ymm9
	vmovdqu	%ymm9, 65600(%rdi,%rax,4)
	vpaddd	%ymm7, %ymm1, %ymm9
	vpaddd	%ymm7, %ymm0, %ymm10
	vpmulld	%ymm10, %ymm9, %ymm9
	vpshufd	$245, %ymm9, %ymm10     # ymm10 = ymm9[1,1,3,3,5,5,7,7]
	vpmuludq	%ymm3, %ymm10, %ymm10
	vpmuludq	%ymm2, %ymm9, %ymm11
	vpshufd	$245, %ymm11, %ymm11    # ymm11 = ymm11[1,1,3,3,5,5,7,7]
	vpblendd	$170, %ymm10, %ymm11, %ymm10 # ymm10 = ymm11[0],ymm10[1],ymm11[2],ymm10[3],ymm11[4],ymm10[5],ymm11[6],ymm10[7]
	vpsrld	$6, %ymm10, %ymm10
	vpmulld	%ymm4, %ymm10, %ymm10
	vpsubd	%ymm10, %ymm9, %ymm9
	vmovdqu	%ymm9, 65632(%rdi,%rax,4)
	vpaddd	%ymm8, %ymm1, %ymm1
	vpaddd	%ymm8, %ymm0, %ymm0
	addq	$32, %rax
	jne	.LBB6_1
# %bb.2:
	vzeroupper
	retq
.Lfunc_end6:
	.size	assignArrayi32, .Lfunc_end6-assignArrayi32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5               # -- Begin function main
.LCPI7_0:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	9                       # 0x9
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	49                      # 0x31
.LCPI7_1:
	.long	64                      # 0x40
	.long	81                      # 0x51
	.long	100                     # 0x64
	.long	121                     # 0x79
	.long	144                     # 0x90
	.long	169                     # 0xa9
	.long	196                     # 0xc4
	.long	225                     # 0xe1
.LCPI7_2:
	.long	256                     # 0x100
	.long	289                     # 0x121
	.long	324                     # 0x144
	.long	361                     # 0x169
	.long	400                     # 0x190
	.long	441                     # 0x1b9
	.long	484                     # 0x1e4
	.long	529                     # 0x211
.LCPI7_3:
	.long	576                     # 0x240
	.long	625                     # 0x271
	.long	676                     # 0x2a4
	.long	729                     # 0x2d9
	.long	784                     # 0x310
	.long	841                     # 0x349
	.long	900                     # 0x384
	.long	961                     # 0x3c1
.LCPI7_4:
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
.LCPI7_5:
	.long	16                      # 0x10
	.long	18                      # 0x12
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	24                      # 0x18
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
.LCPI7_6:
	.long	32                      # 0x20
	.long	34                      # 0x22
	.long	36                      # 0x24
	.long	38                      # 0x26
	.long	40                      # 0x28
	.long	42                      # 0x2a
	.long	44                      # 0x2c
	.long	46                      # 0x2e
.LCPI7_7:
	.long	48                      # 0x30
	.long	50                      # 0x32
	.long	52                      # 0x34
	.long	54                      # 0x36
	.long	56                      # 0x38
	.long	58                      # 0x3a
	.long	60                      # 0x3c
	.long	62                      # 0x3e
.LCPI7_8:
	.long	1024                    # 0x400
	.long	1089                    # 0x441
	.long	1156                    # 0x484
	.long	1225                    # 0x4c9
	.long	1296                    # 0x510
	.long	1369                    # 0x559
	.long	1444                    # 0x5a4
	.long	1521                    # 0x5f1
.LCPI7_9:
	.long	1600                    # 0x640
	.long	1681                    # 0x691
	.long	1764                    # 0x6e4
	.long	1849                    # 0x739
	.long	1936                    # 0x790
	.long	2025                    # 0x7e9
	.long	2116                    # 0x844
	.long	2209                    # 0x8a1
.LCPI7_10:
	.long	2304                    # 0x900
	.long	2401                    # 0x961
	.long	2500                    # 0x9c4
	.long	2601                    # 0xa29
	.long	2704                    # 0xa90
	.long	2809                    # 0xaf9
	.long	2916                    # 0xb64
	.long	3025                    # 0xbd1
.LCPI7_11:
	.long	3136                    # 0xc40
	.long	3249                    # 0xcb1
	.long	3364                    # 0xd24
	.long	3481                    # 0xd99
	.long	3600                    # 0xe10
	.long	3721                    # 0xe89
	.long	3844                    # 0xf04
	.long	3969                    # 0xf81
.LCPI7_12:
	.long	64                      # 0x40
	.long	66                      # 0x42
	.long	68                      # 0x44
	.long	70                      # 0x46
	.long	72                      # 0x48
	.long	74                      # 0x4a
	.long	76                      # 0x4c
	.long	78                      # 0x4e
.LCPI7_13:
	.long	80                      # 0x50
	.long	82                      # 0x52
	.long	84                      # 0x54
	.long	86                      # 0x56
	.long	88                      # 0x58
	.long	90                      # 0x5a
	.long	92                      # 0x5c
	.long	94                      # 0x5e
.LCPI7_14:
	.long	96                      # 0x60
	.long	98                      # 0x62
	.long	100                     # 0x64
	.long	102                     # 0x66
	.long	104                     # 0x68
	.long	106                     # 0x6a
	.long	108                     # 0x6c
	.long	110                     # 0x6e
.LCPI7_15:
	.long	112                     # 0x70
	.long	114                     # 0x72
	.long	116                     # 0x74
	.long	118                     # 0x76
	.long	120                     # 0x78
	.long	122                     # 0x7a
	.long	124                     # 0x7c
	.long	126                     # 0x7e
.LCPI7_16:
	.long	4096                    # 0x1000
	.long	4225                    # 0x1081
	.long	4356                    # 0x1104
	.long	4489                    # 0x1189
	.long	4624                    # 0x1210
	.long	4761                    # 0x1299
	.long	4900                    # 0x1324
	.long	5041                    # 0x13b1
.LCPI7_17:
	.long	5184                    # 0x1440
	.long	5329                    # 0x14d1
	.long	5476                    # 0x1564
	.long	5625                    # 0x15f9
	.long	5776                    # 0x1690
	.long	5929                    # 0x1729
	.long	6084                    # 0x17c4
	.long	6241                    # 0x1861
.LCPI7_18:
	.long	6400                    # 0x1900
	.long	6561                    # 0x19a1
	.long	6724                    # 0x1a44
	.long	6889                    # 0x1ae9
	.long	7056                    # 0x1b90
	.long	7225                    # 0x1c39
	.long	7396                    # 0x1ce4
	.long	7569                    # 0x1d91
.LCPI7_19:
	.long	7744                    # 0x1e40
	.long	7921                    # 0x1ef1
	.long	8100                    # 0x1fa4
	.long	8281                    # 0x2059
	.long	8464                    # 0x2110
	.long	8649                    # 0x21c9
	.long	8836                    # 0x2284
	.long	9025                    # 0x2341
.LCPI7_20:
	.long	128                     # 0x80
	.long	130                     # 0x82
	.long	132                     # 0x84
	.long	134                     # 0x86
	.long	136                     # 0x88
	.long	138                     # 0x8a
	.long	140                     # 0x8c
	.long	142                     # 0x8e
.LCPI7_21:
	.long	144                     # 0x90
	.long	146                     # 0x92
	.long	148                     # 0x94
	.long	150                     # 0x96
	.long	152                     # 0x98
	.long	154                     # 0x9a
	.long	156                     # 0x9c
	.long	158                     # 0x9e
.LCPI7_22:
	.long	160                     # 0xa0
	.long	162                     # 0xa2
	.long	164                     # 0xa4
	.long	166                     # 0xa6
	.long	168                     # 0xa8
	.long	170                     # 0xaa
	.long	172                     # 0xac
	.long	174                     # 0xae
.LCPI7_23:
	.long	176                     # 0xb0
	.long	178                     # 0xb2
	.long	180                     # 0xb4
	.long	182                     # 0xb6
	.long	184                     # 0xb8
	.long	186                     # 0xba
	.long	188                     # 0xbc
	.long	190                     # 0xbe
.LCPI7_24:
	.long	9216                    # 0x2400
	.long	9409                    # 0x24c1
	.long	9604                    # 0x2584
	.long	9801                    # 0x2649
	.long	10000                   # 0x2710
	.long	10201                   # 0x27d9
	.long	10404                   # 0x28a4
	.long	10609                   # 0x2971
.LCPI7_25:
	.long	10816                   # 0x2a40
	.long	11025                   # 0x2b11
	.long	11236                   # 0x2be4
	.long	11449                   # 0x2cb9
	.long	11664                   # 0x2d90
	.long	11881                   # 0x2e69
	.long	12100                   # 0x2f44
	.long	12321                   # 0x3021
.LCPI7_26:
	.long	12544                   # 0x3100
	.long	12769                   # 0x31e1
	.long	12996                   # 0x32c4
	.long	13225                   # 0x33a9
	.long	13456                   # 0x3490
	.long	13689                   # 0x3579
	.long	13924                   # 0x3664
	.long	14161                   # 0x3751
.LCPI7_27:
	.long	14400                   # 0x3840
	.long	14641                   # 0x3931
	.long	14884                   # 0x3a24
	.long	15129                   # 0x3b19
	.long	15376                   # 0x3c10
	.long	15625                   # 0x3d09
	.long	15876                   # 0x3e04
	.long	16129                   # 0x3f01
.LCPI7_28:
	.long	192                     # 0xc0
	.long	194                     # 0xc2
	.long	196                     # 0xc4
	.long	198                     # 0xc6
	.long	200                     # 0xc8
	.long	202                     # 0xca
	.long	204                     # 0xcc
	.long	206                     # 0xce
.LCPI7_29:
	.long	208                     # 0xd0
	.long	210                     # 0xd2
	.long	212                     # 0xd4
	.long	214                     # 0xd6
	.long	216                     # 0xd8
	.long	218                     # 0xda
	.long	220                     # 0xdc
	.long	222                     # 0xde
.LCPI7_30:
	.long	224                     # 0xe0
	.long	226                     # 0xe2
	.long	228                     # 0xe4
	.long	230                     # 0xe6
	.long	232                     # 0xe8
	.long	234                     # 0xea
	.long	236                     # 0xec
	.long	238                     # 0xee
.LCPI7_31:
	.long	240                     # 0xf0
	.long	242                     # 0xf2
	.long	244                     # 0xf4
	.long	246                     # 0xf6
	.long	248                     # 0xf8
	.long	250                     # 0xfa
	.long	252                     # 0xfc
	.long	254                     # 0xfe
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	vmovaps	.LCPI7_0(%rip), %ymm0   # ymm0 = [0,1,4,9,16,25,36,49]
	vmovups	%ymm0, a(%rip)
	vmovaps	.LCPI7_1(%rip), %ymm0   # ymm0 = [64,81,100,121,144,169,196,225]
	vmovups	%ymm0, a+32(%rip)
	vmovaps	.LCPI7_2(%rip), %ymm0   # ymm0 = [256,289,324,361,400,441,484,529]
	vmovups	%ymm0, a+64(%rip)
	vmovaps	.LCPI7_3(%rip), %ymm0   # ymm0 = [576,625,676,729,784,841,900,961]
	vmovups	%ymm0, a+96(%rip)
	vmovaps	.LCPI7_4(%rip), %ymm0   # ymm0 = [0,2,4,6,8,10,12,14]
	vmovups	%ymm0, b(%rip)
	vmovaps	.LCPI7_5(%rip), %ymm0   # ymm0 = [16,18,20,22,24,26,28,30]
	vmovups	%ymm0, b+32(%rip)
	vmovaps	.LCPI7_6(%rip), %ymm0   # ymm0 = [32,34,36,38,40,42,44,46]
	vmovups	%ymm0, b+64(%rip)
	vmovaps	.LCPI7_7(%rip), %ymm0   # ymm0 = [48,50,52,54,56,58,60,62]
	vmovups	%ymm0, b+96(%rip)
	vmovaps	.LCPI7_8(%rip), %ymm0   # ymm0 = [1024,1089,1156,1225,1296,1369,1444,1521]
	vmovups	%ymm0, a+128(%rip)
	vmovaps	.LCPI7_9(%rip), %ymm0   # ymm0 = [1600,1681,1764,1849,1936,2025,2116,2209]
	vmovups	%ymm0, a+160(%rip)
	vmovaps	.LCPI7_10(%rip), %ymm0  # ymm0 = [2304,2401,2500,2601,2704,2809,2916,3025]
	vmovups	%ymm0, a+192(%rip)
	vmovaps	.LCPI7_11(%rip), %ymm0  # ymm0 = [3136,3249,3364,3481,3600,3721,3844,3969]
	vmovups	%ymm0, a+224(%rip)
	vmovaps	.LCPI7_12(%rip), %ymm0  # ymm0 = [64,66,68,70,72,74,76,78]
	vmovups	%ymm0, b+128(%rip)
	vmovaps	.LCPI7_13(%rip), %ymm0  # ymm0 = [80,82,84,86,88,90,92,94]
	vmovups	%ymm0, b+160(%rip)
	vmovaps	.LCPI7_14(%rip), %ymm0  # ymm0 = [96,98,100,102,104,106,108,110]
	vmovups	%ymm0, b+192(%rip)
	vmovaps	.LCPI7_15(%rip), %ymm0  # ymm0 = [112,114,116,118,120,122,124,126]
	vmovups	%ymm0, b+224(%rip)
	vmovaps	.LCPI7_16(%rip), %ymm0  # ymm0 = [4096,4225,4356,4489,4624,4761,4900,5041]
	vmovups	%ymm0, a+256(%rip)
	vmovaps	.LCPI7_17(%rip), %ymm0  # ymm0 = [5184,5329,5476,5625,5776,5929,6084,6241]
	vmovups	%ymm0, a+288(%rip)
	vmovaps	.LCPI7_18(%rip), %ymm0  # ymm0 = [6400,6561,6724,6889,7056,7225,7396,7569]
	vmovups	%ymm0, a+320(%rip)
	vmovaps	.LCPI7_19(%rip), %ymm0  # ymm0 = [7744,7921,8100,8281,8464,8649,8836,9025]
	vmovups	%ymm0, a+352(%rip)
	vmovaps	.LCPI7_20(%rip), %ymm0  # ymm0 = [128,130,132,134,136,138,140,142]
	vmovups	%ymm0, b+256(%rip)
	vmovaps	.LCPI7_21(%rip), %ymm0  # ymm0 = [144,146,148,150,152,154,156,158]
	vmovups	%ymm0, b+288(%rip)
	vmovaps	.LCPI7_22(%rip), %ymm0  # ymm0 = [160,162,164,166,168,170,172,174]
	vmovups	%ymm0, b+320(%rip)
	vmovaps	.LCPI7_23(%rip), %ymm0  # ymm0 = [176,178,180,182,184,186,188,190]
	vmovups	%ymm0, b+352(%rip)
	vmovaps	.LCPI7_24(%rip), %ymm0  # ymm0 = [9216,9409,9604,9801,10000,10201,10404,10609]
	vmovups	%ymm0, a+384(%rip)
	vmovaps	.LCPI7_25(%rip), %ymm0  # ymm0 = [10816,11025,11236,11449,11664,11881,12100,12321]
	vmovups	%ymm0, a+416(%rip)
	vmovaps	.LCPI7_26(%rip), %ymm0  # ymm0 = [12544,12769,12996,13225,13456,13689,13924,14161]
	vmovups	%ymm0, a+448(%rip)
	vmovaps	.LCPI7_27(%rip), %ymm0  # ymm0 = [14400,14641,14884,15129,15376,15625,15876,16129]
	vmovups	%ymm0, a+480(%rip)
	vmovaps	.LCPI7_28(%rip), %ymm0  # ymm0 = [192,194,196,198,200,202,204,206]
	vmovups	%ymm0, b+384(%rip)
	vmovaps	.LCPI7_29(%rip), %ymm0  # ymm0 = [208,210,212,214,216,218,220,222]
	vmovups	%ymm0, b+416(%rip)
	vmovaps	.LCPI7_30(%rip), %ymm0  # ymm0 = [224,226,228,230,232,234,236,238]
	vmovups	%ymm0, b+448(%rip)
	vmovdqa	.LCPI7_31(%rip), %ymm0  # ymm0 = [240,242,244,246,248,250,252,254]
	vmovdqu	%ymm0, b+480(%rip)
	movq	$9999999, elapsed_rdtsc(%rip) # imm = 0x98967F
	movabsq	$19999999999, %rax      # imm = 0x4A817C7FF
	movq	%rax, overal_time(%rip)
	movq	$0, ttime(%rip)
	.p2align	4, 0x90
.LBB7_1:                                # =>This Inner Loop Header: Depth=1
	#APP
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm1
	#NO_APP
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	movq	%rdx, t1_rdtsc(%rip)
	vmovdqu	b(%rip), %ymm0
	vmovdqu	b+32(%rip), %ymm1
	vmovdqu	b+64(%rip), %ymm2
	vmovdqu	b+96(%rip), %ymm3
	vpaddd	a(%rip), %ymm0, %ymm0
	vpaddd	a+32(%rip), %ymm1, %ymm1
	vpaddd	a+64(%rip), %ymm2, %ymm2
	vpaddd	a+96(%rip), %ymm3, %ymm3
	vmovdqu	%ymm0, c(%rip)
	vmovdqu	%ymm1, c+32(%rip)
	vmovdqu	%ymm2, c+64(%rip)
	vmovdqu	%ymm3, c+96(%rip)
	vmovdqu	b+128(%rip), %ymm0
	vmovdqu	b+160(%rip), %ymm1
	vmovdqu	b+192(%rip), %ymm2
	vmovdqu	b+224(%rip), %ymm3
	vpaddd	a+128(%rip), %ymm0, %ymm0
	vpaddd	a+160(%rip), %ymm1, %ymm1
	vpaddd	a+192(%rip), %ymm2, %ymm2
	vpaddd	a+224(%rip), %ymm3, %ymm3
	vmovdqu	%ymm0, c+128(%rip)
	vmovdqu	%ymm1, c+160(%rip)
	vmovdqu	%ymm2, c+192(%rip)
	vmovdqu	%ymm3, c+224(%rip)
	vmovdqu	b+256(%rip), %ymm0
	vmovdqu	b+288(%rip), %ymm1
	vmovdqu	b+320(%rip), %ymm2
	vmovdqu	b+352(%rip), %ymm3
	vpaddd	a+256(%rip), %ymm0, %ymm0
	vpaddd	a+288(%rip), %ymm1, %ymm1
	vpaddd	a+320(%rip), %ymm2, %ymm2
	vpaddd	a+352(%rip), %ymm3, %ymm3
	vmovdqu	%ymm0, c+256(%rip)
	vmovdqu	%ymm1, c+288(%rip)
	vmovdqu	%ymm2, c+320(%rip)
	vmovdqu	%ymm3, c+352(%rip)
	vmovdqu	b+384(%rip), %ymm0
	vmovdqu	b+416(%rip), %ymm1
	vmovdqu	b+448(%rip), %ymm2
	vmovdqu	b+480(%rip), %ymm3
	vpaddd	a+384(%rip), %ymm0, %ymm0
	vpaddd	a+416(%rip), %ymm1, %ymm1
	vpaddd	a+448(%rip), %ymm2, %ymm2
	vpaddd	a+480(%rip), %ymm3, %ymm3
	vmovdqu	%ymm0, c+384(%rip)
	vmovdqu	%ymm1, c+416(%rip)
	vmovdqu	%ymm2, c+448(%rip)
	vmovdqu	%ymm3, c+480(%rip)
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	movq	%rdx, t2_rdtsc(%rip)
	#APP
	#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm2
	#NO_APP
	movq	t2_rdtsc(%rip), %rax
	subq	t1_rdtsc(%rip), %rax
	movq	%rax, ttotal_rdtsc(%rip)
	movq	ttbest_rdtsc(%rip), %rsi
	cmpq	%rsi, %rax
	jge	.LBB7_3
# %bb.2:                                #   in Loop: Header=BB7_1 Depth=1
	movq	%rax, ttbest_rdtsc(%rip)
	movq	elapsed_rdtsc(%rip), %rdi
	movl	$9999999, %ecx          # imm = 0x98967F
	subq	%rdi, %rcx
	movq	%rcx, elapsed(%rip)
	movq	%rax, %rsi
	jmp	.LBB7_4
	.p2align	4, 0x90
.LBB7_3:                                #   in Loop: Header=BB7_1 Depth=1
	movq	elapsed_rdtsc(%rip), %rdi
.LBB7_4:                                #   in Loop: Header=BB7_1 Depth=1
	addq	ttime(%rip), %rax
	movq	%rax, ttime(%rip)
	leaq	-1(%rdi), %rcx
	movq	%rcx, elapsed_rdtsc(%rip)
	testq	%rdi, %rdi
	je	.LBB7_6
# %bb.5:                                #   in Loop: Header=BB7_1 Depth=1
	cmpq	overal_time(%rip), %rax
	jl	.LBB7_1
.LBB7_6:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movq	elapsed(%rip), %rdx
	movl	$10000000, %ecx         # imm = 0x989680
	subq	%rdi, %rcx
	movl	$.L.str.1, %edi
	xorl	%eax, %eax
	vzeroupper
	callq	printf
	movl	$.L.str.2, %edi
	movl	$.L.str.3, %esi
	callq	fopen
	movq	%rax, %rdi
	movq	%rdi, fileForSpeedups(%rip)
	movq	programName(%rip), %rdx
	movq	ttbest_rdtsc(%rip), %r9
	movl	$.L.str.4, %esi
	movl	$128, %ecx
	movl	$128, %r8d
	xorl	%eax, %eax
	callq	fprintf
	xorl	%eax, %eax
	popq	%rcx
	retq
.Lfunc_end7:
	.size	main, .Lfunc_end7-main
	.cfi_endproc
                                        # -- End function
	.type	fileForSpeedups,@object # @fileForSpeedups
	.bss
	.globl	fileForSpeedups
	.p2align	3
fileForSpeedups:
	.quad	0
	.size	fileForSpeedups, 8

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	" "
	.size	.L.str, 2

	.type	programName,@object     # @programName
	.data
	.globl	programName
	.p2align	3
programName:
	.quad	.L.str
	.size	programName, 8

	.type	ttbest_rdtsc,@object    # @ttbest_rdtsc
	.globl	ttbest_rdtsc
	.p2align	3
ttbest_rdtsc:
	.quad	99999999999999999       # 0x16345785d89ffff
	.size	ttbest_rdtsc, 8

	.type	elapsed_rdtsc,@object   # @elapsed_rdtsc
	.globl	elapsed_rdtsc
	.p2align	3
elapsed_rdtsc:
	.quad	9999999                 # 0x98967f
	.size	elapsed_rdtsc, 8

	.type	overal_time,@object     # @overal_time
	.globl	overal_time
	.p2align	3
overal_time:
	.quad	19999999999             # 0x4a817c7ff
	.size	overal_time, 8

	.type	ttime,@object           # @ttime
	.bss
	.globl	ttime
	.p2align	3
ttime:
	.quad	0                       # 0x0
	.size	ttime, 8

	.type	mask,@object            # @mask
	.comm	mask,128,8
	.type	a,@object               # @a
	.comm	a,512,16
	.type	b,@object               # @b
	.comm	b,512,16
	.type	t1_rdtsc,@object        # @t1_rdtsc
	.comm	t1_rdtsc,8,8
	.type	c,@object               # @c
	.comm	c,512,16
	.type	t2_rdtsc,@object        # @t2_rdtsc
	.comm	t2_rdtsc,8,8
	.type	ttotal_rdtsc,@object    # @ttotal_rdtsc
	.comm	ttotal_rdtsc,8,8
	.type	elapsed,@object         # @elapsed
	.comm	elapsed,8,8
	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"\nthe best is %lld in %lldth iteration and %lld repetitions\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"fileForSpeedups"
	.size	.L.str.2, 16

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"a"
	.size	.L.str.3, 2

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"%s, %dx%d, %lld\n"
	.size	.L.str.4, 17

	.type	mask1,@object           # @mask1
	.comm	mask1,128,8
	.type	temp2i16,@object        # @temp2i16
	.comm	temp2i16,32,32

	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
